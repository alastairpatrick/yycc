BEGIN Multiple function declarations (1)
int foo(signed);
signed foo(int);
PREPARSE
EXPECT_AST
[["fun", "E", ["F", "Si", "Si"], "foo"]
,["fun", "E", ["F", "Si", "Si"], "foo"]]


BEGIN Multiple function declarations (2)
int foo(signed);
signed foo(int);
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "Si", "Si"], "foo"]
,["declare","Si"]]


BEGIN Multiple function declarations with extern storage class (1)
extern void foo(int);
extern void foo(int);
PREPARSE
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]
,["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Multiple function declarations with extern storage class (2)
extern void foo(int);
extern void foo(int);
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]
,["declare","V"]]


BEGIN Function declaration having internal linkage may not follow function declaration having external linkage
extern void foo(int);
static void foo(int);
DECLARATIONS
EXPECT_MESSAGE
:2:1: error static declaration of 'foo' follows non-static declaration
:1:1: see prior declaration
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]
,["declare","V"]]


BEGIN Function declaration having internal linkage may preceed function declaration having external linkage (1)
static void foo(int);
extern void foo(int);
PREPARSE
EXPECT_AST
[["fun","I",["F", "V", "Si"],"foo"]
,["fun","E",["F", "V", "Si"],"foo"]]


BEGIN Function declaration having internal linkage may preceed function declaration having external linkage (2)
static void foo(int);
extern void foo(int);
DECLARATIONS
EXPECT_AST
[["fun","I",["F", "V", "Si"],"foo"]
,["declare","V"]]


BEGIN Multiple function declarations with internal linkage (1)
static void foo(int);
static void foo(int);
PREPARSE
EXPECT_AST
[["fun","I",["F", "V", "Si"],"foo"]
,["fun","I",["F", "V", "Si"],"foo"]]


BEGIN Multiple function declarations with internal linkage (1)
static void foo(int);
static void foo(int);
DECLARATIONS
EXPECT_AST
[["fun","I",["F", "V", "Si"],"foo"]
,["declare","V"]]


BEGIN Empty function definition
void foo(int) {
}
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo", [""], ["block", []]]]


BEGIN Function definition with function declaration (1)
static void foo(int);
void foo(int x) {
}
DECLARATIONS
EXPECT_AST
[["fun","I",["F", "V", "Si"],"foo",["x"],["block",[]]]
,["declare","V"]]


BEGIN Function definition with function declaration (2)
void foo(int x) {
}
extern void foo(int);
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo", ["x"], ["block", []]]
,["declare","V"]]


BEGIN Error on function redefinition
void foo(int x) {
}
void foo(int x) {
}
DECLARATIONS
EXPECT_MESSAGE
:3:1: error redefinition of 'foo'
:1:1: see prior definition
END


BEGIN Block scope extern storage class
void foo(int);
{
    extern void foo(int);
}
DECLARATIONS
EXPECT_AST
[
    ["fun", "E", ["F", "V", "Si"], "foo"],
    ["block", [
        ["declare","V"]
    ]]
]


BEGIN Redeclare variable with internal linkage at block scope.
static int x;
void foo(int);
{
    typedef int x;
    {
        extern int x, y;
        x * y;  // Multiplies rather than declaring variable "y" of type "int*"
    }
}
DECLARATIONS
EXPECT_AST
[
    ["var","IS","Si","x",""],
    ["fun","E",["F","V","Si"],"foo"],
        ["block",[
            ["typedef","Si","x"],
            ["block",[
                ["var","ES","Si","y"],
                ["*","Nx","Ny"]
            ]]
        ]]
]


BEGIN #extern function directives composed
#extern function f
#extern function f
DECLARATIONS
EXPECT_GLOBALS
[["fun","E","?","f"]]


BEGIN #extern function directive preceeding function declaration
#extern function f
void f(void) {
}
DECLARATIONS
EXPECT_GLOBALS
[["fun","E",["F","V"],"f",[""],["block",[]]]]
EXPECT_AST
[["declare","V"]]


BEGIN #static function directive preceeding function declaration
#static function f
void f(void) {
}
DECLARATIONS
EXPECT_GLOBALS
[["fun","I",["F","V"],"f",[""],["block",[]]]]
EXPECT_AST
[["declare","V"]]

