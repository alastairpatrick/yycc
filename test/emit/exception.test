BEGIN Non-void throwing function returns with return statement
short f() std::throw {
    return 3;
}
EXPECT_IR
define { ptr, i16 } @f() {
  ret { ptr, i16 } { ptr null, i16 3 }
}
END


BEGIN Non-void throwing function returns without return statement
short f() std::throw {
}
EXPECT_IR
define { ptr, i16 } @f() {
  ret { ptr, i16 } zeroinitializer
}
END


BEGIN Void throwing function returns without return statement
void f() std::throw {
}
EXPECT_IR
define ptr @f() {
  ret ptr null
}
END


BEGIN Void throwing function returns with return statement
void f() std::throw {
    return;
}
EXPECT_IR
define ptr @f() {
  ret ptr null
}
END


BEGIN Non-void function throws
int e;
int f() std::throw {
    std::throw &e;
}
EXPECT_IR
@e = global i32 0

define { ptr, i32 } @f() {
  br label %1

1:                                                ; preds = %0
  %exc = phi ptr [ @e, %0 ]
  %2 = insertvalue { ptr, i32 } undef, ptr %exc, 0
  ret { ptr, i32 } %2
}
END


BEGIN Void function throws
int e;
void f() std::throw {
    std::throw &e;
}
EXPECT_IR
@e = global i32 0

define ptr @f() {
  br label %1

1:                                                ; preds = %0
  %exc = phi ptr [ @e, %0 ]
  ret ptr %exc
}
END


BEGIN Error on attempt to throw from a function that cannot throw
int e;
void f() {
    std::throw &e;
}
EXPECT_MESSAGE
:3:5: error exception thrown here is not handled
:2:6: see containing function 'f'; consider adding 'std::throw'
END


BEGIN Throw twice
int e1, e2;
void f() std::throw {
    std::throw &e1;
    std::throw &e2;
}
EXPECT_IR
@e1 = global i32 0
@e2 = global i32 0

define ptr @f() {
  br label %1

1:                                                ; preds = %2, %0
  %exc = phi ptr [ @e1, %0 ], [ @e2, %2 ]
  ret ptr %exc

2:                                                ; No predecessors!
  br label %1
}
END


BEGIN Throw from const void function
int e;
const void f() std::throw {
    std::throw &e;
}
EXPECT_IR
@e = global i32 0

define ptr @f() {
  br label %1

1:                                                ; preds = %0
  %exc = phi ptr [ @e, %0 ]
  ret ptr %exc
}
END


BEGIN Throwing calls destructors
struct S {
    int x;
    void destructor(S&);
};
int e;
void f() std::throw {
    S s = {1};
    std::throw &e;
}
EXPECT_IR
%S = type { i32 }

@e = global i32 0

define ptr @f() {
  %s = alloca %S, align 8
  store %S { i32 1 }, ptr %s, align 4
  br label %2

1:                                                ; preds = %2
  %exc = phi ptr [ %exc1, %2 ]
  ret ptr %exc

2:                                                ; preds = %0
  %exc1 = phi ptr [ @e, %0 ]
  call void @destructor_wrapper(ptr %s)
  br label %1

3:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %s)
  unreachable
}

declare void @destructor(ptr nocapture)

declare void @destructor_wrapper(ptr)
END


BEGIN Throwing calls destructors and paths share cleanup code
struct S {
    int x;
    void destructor(S&);
};
int e1, e2;
void f() std::throw {
    S s = {1};
    {
        S t = {1};
        std::throw &e1;
    }
    {
        S u = {1};
        std::throw &e2;
    }
}
EXPECT_IR
%S = type { i32 }

@e1 = global i32 0
@e2 = global i32 0

define ptr @f() {
  %u = alloca %S, align 8
  %t = alloca %S, align 8
  %s = alloca %S, align 8
  store %S { i32 1 }, ptr %s, align 4
  store %S { i32 1 }, ptr %t, align 4
  br label %3

1:                                                ; preds = %2
  %exc = phi ptr [ %exc1, %2 ]
  ret ptr %exc

2:                                                ; preds = %5, %3
  %exc1 = phi ptr [ %exc2, %3 ], [ %exc3, %5 ]
  call void @destructor_wrapper(ptr %s)
  br label %1

3:                                                ; preds = %0
  %exc2 = phi ptr [ @e1, %0 ]
  call void @destructor_wrapper(ptr %t)
  br label %2

4:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %t)
  store %S { i32 1 }, ptr %u, align 4
  br label %5

5:                                                ; preds = %4
  %exc3 = phi ptr [ @e2, %4 ]
  call void @destructor_wrapper(ptr %u)
  br label %2

6:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %u)
  call void @destructor_wrapper(ptr %s)
  unreachable
}

declare void @destructor(ptr nocapture)

declare void @destructor_wrapper(ptr)
END


BEGIN Catch exception
int e;
void f() {
    std::try {
        std::throw &e;
    } std::catch (void* e) {
    }
}
EXPECT_IR
@e = global i32 0

define void @f() {
  %e = alloca ptr, align 8
  br label %catch

catch:                                            ; preds = %0
  %exc = phi ptr [ @e, %0 ]
  store ptr %exc, ptr %e, align 8
  br label %1

1:                                                ; preds = %catch, %2
  ret void

2:                                                ; No predecessors!
  br label %1
}
END


BEGIN Throwing does not call destructor in scopes containing try statement
struct S {
    int x;
    void destructor(S&);
};
int e;
void f() {
    S s = {1};
    std::try {
        std::throw &e;
    } std::catch (void* e) {
    }
}
EXPECT_IR
%S = type { i32 }

@e = global i32 0

define void @f() {
  %e = alloca ptr, align 8
  %s = alloca %S, align 8
  store %S { i32 1 }, ptr %s, align 4
  br label %catch

catch:                                            ; preds = %0
  %exc = phi ptr [ @e, %0 ]
  store ptr %exc, ptr %e, align 8
  br label %1

1:                                                ; preds = %catch, %2
  call void @destructor_wrapper(ptr %s)
  ret void

2:                                                ; No predecessors!
  br label %1
}

declare void @destructor(ptr nocapture)

declare void @destructor_wrapper(ptr)
END


BEGIN On return from void function call, check whether it threw
void g() std::throw;
void h();
void f() std::throw {
    g();
    h();
}
EXPECT_IR
declare ptr @g()

declare void @h()

define ptr @f() {
  %1 = call ptr @g()
  %2 = icmp eq ptr %1, null
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 true)
  br i1 %2, label %4, label %5

4:                                                ; preds = %0
  call void @h()
  ret ptr null

5:                                                ; preds = %0
  %exc = phi ptr [ %1, %0 ]
  ret ptr %exc
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #0

attributes #0 = { nocallback nofree nosync nounwind readnone willreturn }
END


BEGIN On return from non-void function call, check whether it threw
int g() std::throw;
int f() std::throw {
    return g() + 1;
}
EXPECT_IR
declare { ptr, i32 } @g()

define { ptr, i32 } @f() {
  %1 = call { ptr, i32 } @g()
  %exc = extractvalue { ptr, i32 } %1, 0
  %2 = icmp eq ptr %exc, null
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 true)
  br i1 %2, label %4, label %9

4:                                                ; preds = %0
  %5 = extractvalue { ptr, i32 } %1, 1
  %6 = add i32 %5, 1
  %7 = insertvalue { ptr, i32 } undef, i32 %6, 1
  %8 = insertvalue { ptr, i32 } %7, ptr null, 0
  ret { ptr, i32 } %8

9:                                                ; preds = %0
  %exc1 = phi ptr [ %exc, %0 ]
  %10 = insertvalue { ptr, i32 } undef, ptr %exc1, 0
  ret { ptr, i32 } %10
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #0

attributes #0 = { nocallback nofree nosync nounwind readnone willreturn }
END


BEGIN Remove conditional control flow when immediately returning result call expression
int g() std::throw;
int f() std::throw {
    return g();
}
EXPECT_IR
declare { ptr, i32 } @g()

define { ptr, i32 } @f() {
  %1 = call { ptr, i32 } @g()
  %exc = extractvalue { ptr, i32 } %1, 0
  %2 = icmp eq ptr %exc, null
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 true)
  br i1 true, label %4, label %8

4:                                                ; preds = %0
  %5 = extractvalue { ptr, i32 } %1, 1
  %6 = insertvalue { ptr, i32 } undef, i32 %5, 1
  %7 = insertvalue { ptr, i32 } %6, ptr %exc, 0
  ret { ptr, i32 } %7

8:                                                ; preds = %0
  %exc1 = phi ptr [ %exc, %0 ]
  %9 = insertvalue { ptr, i32 } undef, ptr %exc1, 0
  ret { ptr, i32 } %9
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #0

attributes #0 = { nocallback nofree nosync nounwind readnone willreturn }
END


BEGIN Remove conditional control flow when immediately returning after void call expression (1)
void g() std::throw;
void f() std::throw {
    g();
    return;
}
EXPECT_IR
declare ptr @g()

define ptr @f() {
  %1 = call ptr @g()
  %2 = icmp eq ptr %1, null
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 true)
  br i1 true, label %4, label %5

4:                                                ; preds = %0
  ret ptr %1

5:                                                ; preds = %0
  %exc = phi ptr [ %1, %0 ]
  ret ptr %exc
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #0

attributes #0 = { nocallback nofree nosync nounwind readnone willreturn }
END


BEGIN Remove conditional control flow when immediately returning after void call expression (1)
void g() std::throw;
void f() std::throw {
    g();
}
EXPECT_IR
declare ptr @g()

define ptr @f() {
  %1 = call ptr @g()
  %2 = icmp eq ptr %1, null
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 true)
  br i1 true, label %4, label %5

4:                                                ; preds = %0
  ret ptr %1

5:                                                ; preds = %0
  %exc = phi ptr [ %1, %0 ]
  ret ptr %exc
}

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.expect.i1(i1, i1) #0

attributes #0 = { nocallback nofree nosync nounwind readnone willreturn }
END


