BEGIN Emit explicit return void
void f() {
    return;
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit implicit return void
void f() {
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit return constant
int f() {
    return 0;
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (1)
int f() {
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (2)
struct S { int x; };
S f() {
}
EXPECT_IR
define { i32 } @f() {
  ret { i32 } zeroinitializer
}
END


BEGIN Load parameter value
int f(int x, int y) {
    return y;
}
EXPECT_IR
define i32 @f(i32 %0, i32 %1) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %y = alloca i32, align 4
  store i32 %1, ptr %y, align 4
  %3 = load i32, ptr %y, align 4
  ret i32 %3
}
END


BEGIN Allocate null initialized automatic duration local variables
void f() {
    int x;
    int y;
}
EXPECT_IR
define void @f() {
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  store i32 0, ptr %y, align 4
  ret void
}
END


BEGIN Allocate explicitly initialized automatic duration local variable
void f() {
    int x = 7;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 7, ptr %x, align 4
  ret void
}
END


BEGIN Null initialized static duration local variable
int f() {
    static int x;
    return x;
}
EXPECT_IR
@f.x = internal global i32 0

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Initialized static duration local variable
int f() {
    static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal global i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Local constant
int f() {
    const static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal constant i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END