
BEGIN Volatile store
void f() {
    volatile int x;
    x = 1;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store volatile i32 1, ptr %x, align 4
  ret void
}
END


BEGIN Volatile load
void f() {
    volatile int x;
    x + 1;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  %1 = load volatile i32, ptr %x, align 4
  %2 = add i32 %1, 1
  ret void
}
END


BEGIN Unreachable branching control flow is harmless
int what;
void f() {
    return;
    if (what) {
    } else {
    }
}
EXPECT_IR
@what = global i32 0

define void @f() {
  ret void

1:                                                ; No predecessors!
  %2 = load i32, ptr @what, align 4
  %3 = trunc i32 %2 to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %5, %4
  ret void
}
END


BEGIN Parameters of pointer to transitory qualified type get nocapture attribute
void f(std::transitory int* p);
EXPECT_IR
declare void @f(ptr nocapture)
END
