BEGIN Emit explicit return void
void f() {
    return;
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit implicit return void
void f() {
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit return constant
int f() {
    return 0;
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (1)
int f() {
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (2)
struct S { int x; };
S f() {
}
EXPECT_IR
define { i32 } @f() {
  ret { i32 } zeroinitializer
}
END


BEGIN Condition operator
int f(_Bool c, int a, int b) {
    return c ? (a+1) : (b-1);
}
EXPECT_IR
define i32 @f(i1 %0, i32 %1, i32 %2) {
  %c = alloca i1, align 1
  store i1 %0, ptr %c, align 1
  %a = alloca i32, align 4
  store i32 %1, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 %2, ptr %b, align 4
  %4 = load i1, ptr %c, align 1
  br i1 %4, label %then, label %else

then:                                             ; preds = %3
  %5 = load i32, ptr %a, align 4
  %6 = add i32 %5, 1
  br label %merge

else:                                             ; preds = %3
  %7 = load i32, ptr %b, align 4
  %8 = sub i32 %7, 1
  br label %merge

merge:                                            ; preds = %else, %then
  %cond = phi i32 [ %6, %then ], [ %8, %else ]
  ret i32 %cond
}
END


BEGIN Subscript operator on pointer (1)
int f(int* p) {
    return p[1];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscript operator on pointer (2)
int f(int* p) {
    return 1[p];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscripted pointer is lvalue
int f(int* p) {
    p[1] = 2;
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  store i32 2, ptr %3, align 4
  ret i32 0
}
END


BEGIN Subscript operator on array
int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END


BEGIN Subscripted array is lvalue
int a[10];
int f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  store i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 0
}
END


BEGIN Volatile store
void f() {
    volatile int x;
    x = 1;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  store volatile i32 1, ptr %x, align 4
  ret void
}
END


BEGIN Volatile load
void f() {
    volatile int x;
    x + 1;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  %1 = load volatile i32, ptr %x, align 4
  %2 = add i32 %1, 1
  ret void
}
END


BEGIN Volatile store array element
volatile int a[10];
void f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define void @f() {
  store volatile i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret void
}
END


BEGIN Volatile load array element
volatile int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load volatile i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END
