BEGIN Does not call destructor on object known to be in default state
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s;
}
EXPECT_IR
define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  ret void
}
END


BEGIN On object with non-default state, calls destructor before end of function
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %s = alloca %S, align 8
  store i32 1, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor on partially uninitialized object
struct S {
    int x, y;
    void destructor(S&);
};
void f() {
    S s = {0, {void}};
}
EXPECT_IR
%S = type { i32, i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %s = alloca %S, align 8
  store i32 0, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor before explicit return
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
    return;
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %s = alloca %S, align 8
  store i32 1, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor at end of compound statement
struct S {
    int x;
    void destructor(S&);
};
int g();
void f() {
    if (g()) {
        S s = {1};
    }
}
EXPECT_IR
%S = type { i32 }

declare i32 @g() local_unnamed_addr

define void @f() local_unnamed_addr {
  %s = alloca %S, align 8
  %1 = tail call i32 @g()
  %2 = and i32 %1, 1
  %.not = icmp eq i32 %2, 0
  br i1 %.not, label %destructor_wrapper.exit, label %3

3:                                                ; preds = %0
  store i32 1, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  br label %destructor_wrapper.exit

destructor_wrapper.exit:                          ; preds = %3, %0
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor on parameter passed by value
struct S {
    int x;
    void destructor(S&);
};
void f(S s) {
}
EXPECT_IR
%S = type { i32 }

define void @f(%S %0) local_unnamed_addr {
destructor_wrapper.exit:
  %s = alloca %S, align 8
  %.fca.0.extract = extractvalue %S %0, 0
  store i32 %.fca.0.extract, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor on parameter passed by rvalue reference
struct S {
    int x;
    void destructor(S&);
};
void f(S s&&) {
}
EXPECT_IR
define void @f(ptr nocapture %0) local_unnamed_addr {
destructor_wrapper.exit:
  tail call void @destructor(ptr nonnull %0)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Does not call destructor on parameter passed by lvalue reference
struct S {
    int x;
    void destructor(S&);
};
void f(S s&) {
}
EXPECT_IR
; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define void @f(ptr nocapture readnone %0) local_unnamed_addr #0 {
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
END


BEGIN Move expression resets object to default state, preventing destructor
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
    &&s;            // the temporary is destroyed though
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit3:
  %0 = alloca %S, align 8
  store i32 1, ptr %0, align 8
  call void @destructor(ptr nonnull %0)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Calls destructor after move if object is no longer in default state
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
    &&s;        // temporary will be destroyed
    s.x = 2;    // and s too
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %0 = alloca %S, align 8
  %s = alloca %S, align 8
  store i32 1, ptr %0, align 8
  call void @destructor(ptr nonnull %0)
  store i32 2, ptr %s, align 8
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Move expression in initializer expression
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
    S t = &&s;  // now t should be destroyed but not s
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit3:
  %t = alloca %S, align 8
  store i32 1, ptr %t, align 8
  call void @destructor(ptr nonnull %t)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Move expression in assignment expression
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S s = {1};
    S t;
    t = &&s;  // only one destructor should be called: for t after s is moved in
}
EXPECT_IR
%S = type { i32 }

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %t = alloca %S, align 8
  store i32 1, ptr %t, align 8
  call void @destructor(ptr nonnull %t)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Object destructor is called because an external function might have set it to non-default state
struct S {
    int x;
    void destructor(S&);
};
void e(S&);
void f() {
    S s;
    e(s);       // after this call, s might not have default state
}
EXPECT_IR
%S = type { i32 }

declare void @e(ptr nocapture) local_unnamed_addr

define void @f() local_unnamed_addr {
destructor_wrapper.exit:
  %s = alloca %S, align 8
  store i32 0, ptr %s, align 8
  call void @e(ptr nonnull %s)
  call void @destructor(ptr nonnull %s)
  ret void
}

declare void @destructor(ptr nocapture) local_unnamed_addr
END


BEGIN Move expression in return statement
struct S {
    int x;
    void destructor(S&);
};
S f(S s) {
    return &&s;
}
EXPECT_IR
%S = type { i32 }

define %S @f(%S returned %0) local_unnamed_addr {
destructor_wrapper.exit:
  ret %S %0
}
END
