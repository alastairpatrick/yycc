BEGIN Global null initialized internal variable
static int x;
EXPECT_IR
@x = internal global i32 0
END


BEGIN Global initialized internal variable
static int x = 1+1;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Global initialized external variable
int x = 1+1;
EXPECT_IR
@x = global i32 2
END


BEGIN Global constant
const int x = 1+1;
EXPECT_IR
@x = constant i32 2
END


BEGIN Global uninitialized constant
const int x = {void};
EXPECT_IR
@x = constant i32 undef
END


BEGIN Variable with linkage only emitted once (1)
static int x;
static int x = 1+1;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Variable with linkage only emitted once (1)
static int x = 1+1;
static int x;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Scalar global variable initialized with initializer expression (1)
int x = {1};
EXPECT_IR
@x = global i32 1
END


BEGIN Scalar global variable initialized with initializer expression (2)
int x = {};
EXPECT_IR
@x = global i32 0
END


BEGIN Scalar global variable initialized with initializer expression (3)
int x = {1, 2};
EXPECT_MESSAGE
:1:13: error excess elements in scalar initializer
END


BEGIN Array initialized with fewer initializers than array size
int x[2] = {1};
EXPECT_IR
@x = global [2 x i32] [i32 1, i32 0]
END


BEGIN Scalar global variable initialized with initializer expression with too many braces
int x = {{1}};
EXPECT_MESSAGE
:1:11: error too many braces around initializer
END


BEGIN Scalar global variable initialized with initializer expression with too many braces and no elements
int x = {{}};
EXPECT_MESSAGE
:1:11: error too many braces around initializer
END


BEGIN Variable initialized with constant expression involving pointer arithmetic (1)
#var x
int* y = x + 1;
int x[2];
EXPECT_IR
@y = global ptr getelementptr inbounds (i32, ptr @x, i32 1)
@x = global [2 x i32] zeroinitializer
END


BEGIN Variable initialized with constant expression involving pointer arithmetic (2)
#var x
int* y = &x[1];
int x[2];
EXPECT_IR
@y = global ptr getelementptr inbounds ([2 x i32], ptr @x, i64 0, i32 1)
@x = global [2 x i32] zeroinitializer
END


BEGIN Static initializer must be a constant expression
int x = 4; // has an initializer which could be folded to 4 but type is not const qualified so that's not allowed
int y = x;
EXPECT_MESSAGE
:2:9: error static initializer is not a constant expression
END


BEGIN Static initializer can be a const qualified global (1)
const int x = 4;
int y = x;
EXPECT_IR
@x = constant i32 4
@y = global i32 4
END


BEGIN Static initializer can be a const qualified global (2)
#var x
int y = x;
const int x = 4;
EXPECT_IR
@y = global i32 4
@x = constant i32 4
END


BEGIN Static initializer can be a const qualified global where the initializer has a different type from the global itself
const int x = 4.0;
int y = x;
EXPECT_IR
@x = constant i32 4
@y = global i32 4
END


BEGIN Scalar local variable initialized with initializer expression (1)
void f() {
    int x = {1};
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 1, ptr %x, align 4
  ret void
}
END


BEGIN Scalar local variable initialized with initializer expression (2)
void f() {
    int x = {};
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 0, ptr %x, align 4
  ret void
}
END


BEGIN Scalar uninitialized local variable
void f() {
    int x = {void};
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  ret void
}
END


BEGIN Load parameter value
int f(int x, int y) {
    return y;
}
EXPECT_IR
define i32 @f(i32 %0, i32 %1) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %y = alloca i32, align 4
  store i32 %1, ptr %y, align 4
  %3 = load i32, ptr %y, align 4
  ret i32 %3
}
END


BEGIN Load pass-by-reference parameter value
int f(int &x) {
    return x;
}
EXPECT_IR
define i32 @f(ptr %0) {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}
END


BEGIN Allocate null initialized automatic duration local variables
void f() {
    int x;
    int y;
}
EXPECT_IR
define void @f() {
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  ret void
}
END


BEGIN Allocate explicitly initialized automatic duration local variable
void f() {
    int x = 7;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 7, ptr %x, align 4
  ret void
}
END


BEGIN Allocate explicitly uninitialized automatic duration local variable (1)
void f() {
    int x = {void};
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  ret void
}
END


BEGIN Allocate explicitly uninitialized automatic duration local variable (2)
struct S { int x; };
void f() {
    S x = {void};
}
EXPECT_IR
%S = type { i32 }

define void @f() {
  %x = alloca %S, align 8
  ret void
}
END


BEGIN Error on incorrect use of void keyword to express uninitialized local variable
void f() {
    int x = void;
}
EXPECT_MESSAGE
:2:13: error unexpected token 'void'
END


BEGIN Null initialized static duration local variable
int f() {
    static int x;
    return x;
}
EXPECT_IR
@f.x = internal global i32 0

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Initialized static duration local variable
int f() {
    static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal global i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Local constant
int f() {
    const static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal constant i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Global array
int a[10];
EXPECT_IR
@a = global [10 x i32] zeroinitializer
END


BEGIN Local array
void f() {
    int a[10];
}
EXPECT_IR
define void @f() {
  %a = alloca [10 x i32], align 4
  ret void
}
END


BEGIN Local array variable with initializer expression
void f(int x) {
    int a[] = {x, x};
}
EXPECT_IR
define void @f(i32 %0) {
  %a = alloca [2 x i32], align 4
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = load i32, ptr %x, align 4
  %4 = insertvalue [2 x i32] undef, i32 %2, 0
  %5 = insertvalue [2 x i32] %4, i32 %3, 1
  store [2 x i32] %5, ptr %a, align 4
  ret void
}
END


BEGIN Global array variable with initializer expression
int a[] = {1, 1+1};
EXPECT_IR
@a = global [2 x i32] [i32 1, i32 2]
END


BEGIN Global struct variable
struct S { int x; int y; };
S x;
EXPECT_IR
%S = type { i32, i32 }

@x = global %S zeroinitializer
END


BEGIN Local struct variable
void f() {
    struct S { int x; int y; };
    S x;
}
EXPECT_IR
%S = type { i32, i32 }

define void @f() {
  %x = alloca %S, align 8
  ret void
}
END


BEGIN Global struct variable with initializer
struct S { int x; int y; };
S x = { 4, 5 };
EXPECT_IR
%S = type { i32, i32 }

@x = global %S { i32 4, i32 5 }
END


BEGIN Global struct uninitialized variable
struct S { int x; int y; };
S x = {void};
EXPECT_IR
%S = type { i32, i32 }

@x = global %S undef
END


BEGIN Uninitialized expresssion nested in initializer
struct S { int x; int y; };
S x = { 4, {void} };
EXPECT_IR
%S = type { i32, i32 }

@x = global %S { i32 4, i32 undef }
END


BEGIN Local struct variable with initializer
void f(int x) {
    struct S { int x; int y; };
    S y = { x, x };
}
EXPECT_IR
%S = type { i32, i32 }

define void @f(i32 %0) {
  %y = alloca %S, align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = load i32, ptr %x, align 4
  %4 = insertvalue %S undef, i32 %2, 0
  %5 = insertvalue %S %4, i32 %3, 1
  store %S %5, ptr %y, align 4
  ret void
}
END


BEGIN Load unsigned from bitfield
struct S {
    int x: 24;
    unsigned char y: 7;
};
unsigned char f(S* p) {
    return p->y;
}
EXPECT_IR
%S = type { i32 }

define i8 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %y = getelementptr inbounds %S, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %y, align 4
  %4 = and i32 %3, 2130706432
  %5 = lshr i32 %4, 24
  %6 = trunc i32 %5 to i8
  ret i8 %6
}
END


BEGIN Load signed from bitfield
struct S {
    int x: 24;
    signed char y: 7;
};
signed char f(S* p) {
    return p->y;
}
EXPECT_IR
%S = type { i32 }

define i8 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %y = getelementptr inbounds %S, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %y, align 4
  %4 = and i32 %3, 2130706432
  %5 = shl i32 %4, 1
  %6 = ashr i32 %5, 25
  %7 = trunc i32 %6 to i8
  ret i8 %7
}
END


BEGIN Store to bitfield (1)
struct S {
    int x: 24;
    char y: 8;
};
void f(S* p) {
    p->y = 7;
}
EXPECT_IR
%S = type { i32 }

define void @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %y = getelementptr inbounds %S, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %y, align 4
  %4 = and i32 %3, 16777215
  %5 = or i32 117440512, %4
  store i32 %5, ptr %y, align 4
  ret void
}
END


BEGIN Store to bitfield (2)
struct S {
    int x: 24;
    short y: 9;
};
void f(S* p, int z) {
    p->y = z;
}
EXPECT_IR
%S = type { i32, i16 }

define void @f(ptr %0, i32 %1) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %z = alloca i32, align 4
  store i32 %1, ptr %z, align 4
  %3 = load ptr, ptr %p, align 8
  %y = getelementptr inbounds %S, ptr %3, i32 0, i32 1
  %4 = load i32, ptr %z, align 4
  %5 = trunc i32 %4 to i16
  %6 = shl i16 %5, 0
  %7 = and i16 %6, 511
  %8 = load i16, ptr %y, align 2
  %9 = and i16 %8, -512
  %10 = or i16 %7, %9
  store i16 %10, ptr %y, align 2
  ret void
}
END


BEGIN Bitfields in union never merged, i.e. always one struct slot per member
union U {
    int x: 24;
    char y: 8;
};
void f(U* p) {
    p->y = 7;
}
EXPECT_IR
%U = type { [0 x i8], [1 x i32] }

define void @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %y = getelementptr inbounds %U, ptr %2, i32 0, i32 0, i32 0
  %3 = load i8, ptr %y, align 1
  %4 = and i8 %3, 0
  %5 = or i8 7, %4
  store i8 %5, ptr %y, align 1
  ret void
}
END


BEGIN Global initialized function pointer variable (1)
void f() {
}
void (*fp)() = &f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Global initialized function pointer variable (2)
void f() {
}
void (*fp)() = f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Global initialized function pointer variable (3)
void f() {
}
void *fp = (void*) f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Global initialized function pointer variable (4)
#var f
void (*fp)() = &f;
void f() {
}
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Local variable initialized function pointer variable (1)
void f() {
}
void g() {
    void (*fp)() = &f;
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  %fp = alloca ptr, align 8
  store ptr @f, ptr %fp, align 8
  ret void
}
END


BEGIN Local variable initialized function pointer variable (2)
void f() {
}
void g() {
    void (*fp)() = f;
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  %fp = alloca ptr, align 8
  store ptr @f, ptr %fp, align 8
  ret void
}
END


BEGIN Global char pointer variable initialized with string literal
const char* c = "\000\000f";
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i8] c"\00\00f\00"
END


BEGIN Global signed char pointer variable initialized with string literal
signed char* c = "\000\000f";
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i8] c"\00\00f\00"
END


BEGIN Global unsigned char pointer variable initialized with string literal
const unsigned char* c = "\000\000f";
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i8] c"\00\00f\00"
END


BEGIN Global void pointer variable initialized with string literal
const void* c = "\000\000f";
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i8] c"\00\00f\00"
END


BEGIN Global void pointer variable initialized with string literal surrounded by braces
const void* c = { "\000\000f" };
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i8] c"\00\00f\00"
END


BEGIN Global void pointer variable initialized with too many string literals
const void* c = { "a", "b" };
EXPECT_MESSAGE
:1:24: error excess elements in scalar initializer
END


BEGIN Error attempting to initialize short pointer with string literal
short* c = "\000\000f";
EXPECT_MESSAGE
:1:12: contextual error conversion from type 'char const[4]' to type 'short*' requires explicit cast
END


BEGIN Global char array variable initialized with string literal
const char c[4] = "\000\000f";
EXPECT_IR
@c = global [4 x i8] c"\00\00f\00"
END


BEGIN Global signed char array variable initialized with string literal
const signed char c[4] = "\000\000f";
EXPECT_IR
@c = global [4 x i8] c"\00\00f\00"
END


BEGIN Global unsigned char array variable initialized with string literal
const unsigned char c[4] = "\000\000f";
EXPECT_IR
@c = global [4 x i8] c"\00\00f\00"
END


BEGIN Global char array variable initialized with string literal surrounded by braces (1)
const char c[4] = { "\000\000f" };
EXPECT_IR
@c = global [4 x i8] c"\00\00f\00"
END


BEGIN Global char array variable initialized with too many string literals
const char c[2] = { "a", "b" };
EXPECT_MESSAGE
:1:21: error cannot convert from type 'char const[2]' to type 'char'
END


BEGIN Global char incomplete array variable initialized with string literal surrounded with braces
const char c[] = { "foo" };
EXPECT_IR
@c = global [4 x i8] c"foo\00"
END


BEGIN Local unsigned char pointer variable initialized with string literal
void f() {
    signed char* c = "\000\000f";
}
EXPECT_IR
@const = private constant [4 x i8] c"\00\00f\00"

define void @f() {
  %c = alloca ptr, align 8
  store ptr @const, ptr %c, align 8
  ret void
}
END


BEGIN Global array variable initialized with smaller string literal
const char c[10] = "abc";
EXPECT_IR
@c = global [10 x i8] c"abc\00\00\00\00\00\00\00"
END


BEGIN Global pointer variable initialized with wide string literal
const unsigned short* c = L"\000\000f";
EXPECT_IR
@c = global ptr @const
@const = private constant [4 x i16] [i16 0, i16 0, i16 102, i16 0]
END


BEGIN Global array variable initialized with wide string literal
unsigned short c[4] = L"\000\000f";
EXPECT_IR
@c = global [4 x i16] [i16 0, i16 0, i16 102, i16 0]
END


BEGIN Local pointer variable initialized with string literal
void f() {
    const char* c = "\000\000f";
}
EXPECT_IR
@const = private constant [4 x i8] c"\00\00f\00"

define void @f() {
  %c = alloca ptr, align 8
  store ptr @const, ptr %c, align 8
  ret void
}
END


BEGIN Local array variable initialized with string literal
void f() {
    const char c[] = "\000\000f";
}
EXPECT_IR
define void @f() {
  %c = alloca [4 x i8], align 1
  store [4 x i8] c"\00\00f\00", ptr %c, align 1
  ret void
}
END


BEGIN Identical string literal globals are pooled
void f() {
    const char* a = "abc";
    const char* b = "abc";
}
EXPECT_IR
@const = private constant [4 x i8] c"abc\00"

define void @f() {
  %b = alloca ptr, align 8
  %a = alloca ptr, align 8
  store ptr @const, ptr %a, align 8
  store ptr @const, ptr %b, align 8
  ret void
}
END


BEGIN Identical wide string literal globals are pooled
void f() {
    const unsigned short* a = L"abc";
    const unsigned short* b = L"abc";
}
EXPECT_IR
@const = private constant [4 x i16] [i16 97, i16 98, i16 99, i16 0]

define void @f() {
  %b = alloca ptr, align 8
  %a = alloca ptr, align 8
  store ptr @const, ptr %a, align 8
  store ptr @const, ptr %b, align 8
  ret void
}
END


BEGIN Strings of different types do not share globals
void f() {
    const char* a = "abc";
    const unsigned short* b = L"abc";
}
EXPECT_IR
@const = private constant [4 x i8] c"abc\00"
@const.1 = private constant [4 x i16] [i16 97, i16 98, i16 99, i16 0]

define void @f() {
  %b = alloca ptr, align 8
  %a = alloca ptr, align 8
  store ptr @const, ptr %a, align 8
  store ptr @const.1, ptr %b, align 8
  ret void
}
END


BEGIN Load value of member variable from member function via "this" passed by reference
struct S {
    int x;
    int f(S &this) { return x; }
};
EXPECT_IR
%S = type { i32 }

define i32 @f(ptr %0) {
  %2 = getelementptr %S, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}
END


BEGIN Load value of member variable from two member functions via "this" passed by reference
struct S {
    int x;
    int f1(S &this) { return x; }
    int f2(S &this) { return x; }
};
EXPECT_IR
%S = type { i32 }

define i32 @f1(ptr %0) {
  %2 = getelementptr %S, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define i32 @f2(ptr %0) {
  %2 = getelementptr %S, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}
END


BEGIN Store value of member variable from member function via "this" passed by reference
struct S {
    int x;
    void f(S &this) { x = 7; }
};
EXPECT_IR
%S = type { i32 }

define void @f(ptr %0) {
  %2 = getelementptr %S, ptr %0, i32 0, i32 0
  store i32 7, ptr %2, align 4
  ret void
}
END


BEGIN Member variables of outer type are not accessible to member function of nested type
struct S {
    int x;
    struct T {
        int f(T &this) { return x; }
    };
};
EXPECT_MESSAGE
:4:33: error 'x' is not a member of the immediately enclosing type so is inaccessible via 'this'
:2:9: ... see definition of member 'x'
END


BEGIN Load value of member variable from member function via "this" passed by value
struct S {
    int x;
    int f(S this) { return x; }
};
EXPECT_IR
%S = type { i32 }

define i32 @f(%S %0) {
  %this = alloca %S, align 8
  store %S %0, ptr %this, align 4
  %2 = getelementptr %S, ptr %this, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}
END


BEGIN Load value of member variable from member function via second parameter "this"
struct S {
    int x;
    int f(int z, S &this) { return x; }
};
EXPECT_IR
%S = type { i32 }

define i32 @f(i32 %0, ptr %1) {
  %z = alloca i32, align 4
  store i32 %0, ptr %z, align 4
  %3 = getelementptr %S, ptr %1, i32 0, i32 0
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Store in element of pass-by-reference array
void f(int a[3][2]) {
    a[2][1] = 7;
}
EXPECT_IR
define void @f(ptr %0) {
  %2 = getelementptr [3 x [2 x i32]], ptr %0, i64 0, i32 2
  %3 = getelementptr [2 x i32], ptr %2, i64 0, i32 1
  store i32 7, ptr %3, align 4
  ret void
}
END


BEGIN Local reference variable
int f(int x) {
    int &r = x;
    return r;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Local reference variable initialized with const global
const int g = 2;
int f() {
    const int &r = g;
    return r;
}
EXPECT_IR
@g = constant i32 2

define i32 @f() {
  %1 = load i32, ptr @g, align 4
  ret i32 %1
}
END


BEGIN Local reference variable without initializer
void f() {
    int &r;
}
EXPECT_MESSAGE
:2:9: error variable 'r' of reference type 'int&' must have initializer
END


BEGIN Local reference variable with initializer that does not yield lvalue
void f() {
    int &r = 2;
}
EXPECT_MESSAGE
:2:9: error cannot bind variable 'r' of reference type 'int&' to rvalue
END


BEGIN Local reference variable with initializer that yields more qualified type
const int x;
void f() {
    volatile int &r = x;
}
EXPECT_MESSAGE
:3:18: error binding variable 'r' of reference type 'int volatile&' to value of type 'int const' discards type qualifier
END


BEGIN Local reference variable with initializer that yields less qualified type
int x;
void f() {
    volatile int &r = x;
}
END


BEGIN Global reference variable (1)
int x;
int& r1 = x;
int f() { return r1; }
EXPECT_IR
@x = global i32 0

define i32 @f() {
  %1 = load i32, ptr @x, align 4
  ret i32 %1
}
END


BEGIN Global reference variable (2)
int x;
int& r2 = r1;
int& r1 = x;
int f() { return r2; }
EXPECT_IR
@x = global i32 0

define i32 @f() {
  %1 = load i32, ptr @x, align 4
  ret i32 %1
}
END


BEGIN Global const reference variable
const int x = 2;
const int& r = x;
END


BEGIN Global reference variable cannot be initialized with rvalue
int& r1 = 2;
int f() { return r1; }
EXPECT_MESSAGE
:1:11: error cannot bind variable 'r1' of reference type 'int&' to rvalue
END


BEGIN Local static reference variable initialized with local
int f() {
    int x;
    static int& r = x;
    return r;
}
EXPECT_MESSAGE
:3:21: error variable 'x' is not a constant
:2:9: ... see definition of variable 'x'
:3:21: error cannot bind variable 'r' of reference type 'int&' to rvalue
END


BEGIN Global variable of type struct containing initializers (1)
struct S {
    int x;
    int y = 1;
};
S s;
EXPECT_IR
%S = type { i32, i32 }

@s = global %S { i32 0, i32 1 }
END


BEGIN Global variable of type struct containing initializers (2)
struct T {
    int x, y;
};
struct S {
    T t = { 1, 2 };
};
S s;
EXPECT_IR
%S = type { %T }
%T = type { i32, i32 }

@s = global %S { %T { i32 1, i32 2 } }
END


BEGIN Global variable of type struct containing anonymous structs with initializers
struct S {
    struct {
        int x;
        int y = 1;
    };
};
S s;
EXPECT_IR
%S = type { { i32, i32 } }

@s = global %S { { i32, i32 } { i32 0, i32 1 } }
END


BEGIN Local variable of type struct containing initializers
struct S {
    int x;
    int y = 1;
    void destructor(S&);
};
void f() {
    S s;
}
EXPECT_IR
%S = type { i32, i32 }

define void @f() {
  %s = alloca %S, align 8
  store %S { i32 0, i32 1 }, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  ret void
}

declare void @destructor(ptr)

declare void @destructor_wrapper(ptr)
END
