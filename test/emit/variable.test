BEGIN Global null initialized internal variable
static int x;
EXPECT_IR
@x = internal global i32 0
END


BEGIN Global initialized internal variable
static int x = 1+1;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Global initialized external variable
int x = 1+1;
EXPECT_IR
@x = global i32 2
END


BEGIN Global constant
const int x = 1+1;
EXPECT_IR
@x = constant i32 2
END


BEGIN Variable with linkage only emitted once (1)
static int x;
static int x = 1+1;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Variable with linkage only emitted once (1)
static int x = 1+1;
static int x;
EXPECT_IR
@x = internal global i32 2
END


BEGIN Load parameter value
int f(int x, int y) {
    return y;
}
EXPECT_IR
define i32 @f(i32 %0, i32 %1) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %y = alloca i32, align 4
  store i32 %1, ptr %y, align 4
  %3 = load i32, ptr %y, align 4
  ret i32 %3
}
END


BEGIN Allocate null initialized automatic duration local variables
void f() {
    int x;
    int y;
}
EXPECT_IR
define void @f() {
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  ret void
}
END


BEGIN Allocate explicitly initialized automatic duration local variable
void f() {
    int x = 7;
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 7, ptr %x, align 4
  ret void
}
END


BEGIN Null initialized static duration local variable
int f() {
    static int x;
    return x;
}
EXPECT_IR
@f.x = internal global i32 0

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Initialized static duration local variable
int f() {
    static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal global i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Local constant
int f() {
    const static int x = 1+1;
    return x;
}
EXPECT_IR
@f.x = internal constant i32 2

define i32 @f() {
  %1 = load i32, ptr @f.x, align 4
  ret i32 %1
}
END


BEGIN Global array
int a[10];
EXPECT_IR
@a = global [10 x i32] zeroinitializer
END


BEGIN Local array
void f() {
    int a[10];
}
EXPECT_IR
define void @f() {
  %a = alloca [10 x i32], align 4
  ret void
}
END


BEGIN Global initialized function pointer variable (1)
void f() {
}
void (*fp)() = &f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Global initialized function pointer variable (2)
void f() {
}
void (*fp)() = f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Global initialized function pointer variable (3)
void f() {
}
void *fp = f;
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}
END


BEGIN Local variable initialized function pointer variable (1)
void f() {
}
void g() {
    void (*fp)() = &f;
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  %fp = alloca ptr, align 8
  store ptr @f, ptr %fp, align 8
  ret void
}
END


BEGIN Local variable initialized function pointer variable (2)
void f() {
}
void g() {
    void (*fp)() = f;
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  %fp = alloca ptr, align 8
  store ptr @f, ptr %fp, align 8
  ret void
}
END
