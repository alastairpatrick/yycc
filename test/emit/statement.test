// ForStatement

BEGIN Infinite while loop
void f() {
    while (1) {}
}
EXPECT_IR
define void @f() {
  br label %for_l

for_l:                                            ; preds = %for_b, %0
  br i1 true, label %for_b, label %for_e

for_b:                                            ; preds = %for_l
  br label %for_l

for_e:                                            ; preds = %for_l
  ret void
}
END


BEGIN Infinite for loop
void f() {
    for (;;) {}
}
EXPECT_IR
define void @f() {
  br label %for_l

for_l:                                            ; preds = %for_l, %0
  br label %for_l

for_e:                                            ; No predecessors!
  ret void
}
END


BEGIN For integer range
void f() {
    unsigned i;
    for (i = 1; i < 10; ++i) {}
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 1, ptr %i, align 4
  br label %for_l

for_l:                                            ; preds = %for_i, %0
  %1 = load i32, ptr %i, align 4
  %2 = icmp ult i32 %1, 10
  br i1 %2, label %for_b, label %for_e

for_b:                                            ; preds = %for_l
  br label %for_i

for_i:                                            ; preds = %for_b
  %3 = load i32, ptr %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, ptr %i, align 4
  br label %for_l

for_e:                                            ; preds = %for_l
  ret void
}
END


BEGIN For integer range with internal declaration
void f() {
    for (unsigned i = 1; i < 10; ++i) {}
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 1, ptr %i, align 4
  br label %for_l

for_l:                                            ; preds = %for_i, %0
  %1 = load i32, ptr %i, align 4
  %2 = icmp ult i32 %1, 10
  br i1 %2, label %for_b, label %for_e

for_b:                                            ; preds = %for_l
  br label %for_i

for_i:                                            ; preds = %for_b
  %3 = load i32, ptr %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, ptr %i, align 4
  br label %for_l

for_e:                                            ; preds = %for_l
  ret void
}
END


BEGIN Break for loop
void f() {
    for (int i = 0; i < 10; ++i) {
        break;
    }
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  br label %for_l

for_l:                                            ; preds = %for_i, %0
  %1 = load i32, ptr %i, align 4
  %2 = icmp slt i32 %1, 10
  br i1 %2, label %for_b, label %for_e

for_b:                                            ; preds = %for_l
  br label %for_e

for_i:                                            ; No predecessors!
  %3 = load i32, ptr %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, ptr %i, align 4
  br label %for_l

for_e:                                            ; preds = %for_b, %for_l
  ret void
}
END


BEGIN Continue for loop
void f() {
    for (int i = 0; i < 10; ++i) {
        continue;
    }
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  br label %for_l

for_l:                                            ; preds = %for_i, %0
  %1 = load i32, ptr %i, align 4
  %2 = icmp slt i32 %1, 10
  br i1 %2, label %for_b, label %for_e

for_b:                                            ; preds = %for_l
  br label %for_i

for_i:                                            ; preds = %for_b
  %3 = load i32, ptr %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, ptr %i, align 4
  br label %for_l

for_e:                                            ; preds = %for_l
  ret void
}
END


// GoToStatement

BEGIN Goto prior label
void f() {
target:
    goto target;
}
EXPECT_IR
define void @f() {
  br label %target

target:                                           ; preds = %target, %0
  br label %target
}
END



BEGIN Goto following label
void f() {
    goto target;
target:
    return;
}
EXPECT_IR
define void @f() {
  br label %target

target:                                           ; preds = %0
  ret void
}
END


// IfElseStatement

BEGIN If statement
void f(int c) {
    if (c) {}
}
EXPECT_IR
define void @f(i32 %0) {
  %c = alloca i32, align 4
  store i32 %0, ptr %c, align 4
  %2 = load i32, ptr %c, align 4
  %3 = trunc i32 %2 to i1
  br i1 %3, label %if_c, label %if_e

if_c:                                             ; preds = %1
  br label %if_e

if_e:                                             ; preds = %if_c, %1
  ret void
}
END


BEGIN If-else statement
void f(int c) {
    if (c) {}
    else {}
}
EXPECT_IR
define void @f(i32 %0) {
  %c = alloca i32, align 4
  store i32 %0, ptr %c, align 4
  %2 = load i32, ptr %c, align 4
  %3 = trunc i32 %2 to i1
  br i1 %3, label %if_c, label %if_a

if_c:                                             ; preds = %1
  br label %if_e

if_a:                                             ; preds = %1
  br label %if_e

if_e:                                             ; preds = %if_a, %if_c
  ret void
}
END



// ReturnStatement

BEGIN Emit explicit return void
void f() {
    return;
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit implicit return void
void f() {
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit return constant
int f() {
    return 0;
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (1)
int f() {
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (2)
struct S { int x; };
S f() {
}
EXPECT_IR
%S = type { i32 }

define %S @f() {
  ret %S zeroinitializer
}
END


// SwitchStatement

BEGIN Switch with default
int f(int x) {
    switch (x) {
        default:
            return 21;
        case 7:
            x = 3;
            // falls through
        case 1+1:
            return 2;
        case 3:
            break;
    }
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  switch i32 %2, label %6 [
    i32 7, label %4
    i32 2, label %5
    i32 3, label %3
  ]

3:                                                ; preds = %1
  br label %7

4:                                                ; preds = %1
  store i32 3, ptr %x, align 4
  br label %5

5:                                                ; preds = %4, %1
  ret i32 2

6:                                                ; preds = %1
  ret i32 21

7:                                                ; preds = %3
  ret i32 0
}
END

BEGIN Switch without default
int f(int x) {
    switch (x) {
        case 7:
            x = 3;
            // falls through
        case 1+1:
            return 2;
        case 3:
            break;
    }
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  switch i32 %2, label %6 [
    i32 7, label %4
    i32 2, label %5
    i32 3, label %3
  ]

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  store i32 3, ptr %x, align 4
  br label %5

5:                                                ; preds = %4, %1
  ret i32 2

6:                                                ; preds = %3, %1
  ret i32 0
}
END
