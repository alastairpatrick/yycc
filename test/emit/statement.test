REM ******** ForStatement ********

BEGIN Infinite while loop
void f() {
    while (1) {}
}
EXPECT_IR
define void @f() {
  br label %1

1:                                                ; preds = %2, %0
  br i1 true, label %2, label %3

2:                                                ; preds = %1
  call void @llvm.sideeffect()
  br label %1

3:                                                ; preds = %1
  ret void
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.sideeffect() #0

attributes #0 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
END


BEGIN Infinite for loop
void f() {
    for (;;) {}
}
EXPECT_IR
define void @f() {
  br label %1

1:                                                ; preds = %1, %0
  call void @llvm.sideeffect()
  br label %1

2:                                                ; No predecessors!
  ret void
}

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.sideeffect() #0

attributes #0 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn }
END


BEGIN For integer range
void f() {
    unsigned i;
    for (i = 1; i < 10; ++i) {}
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 1, ptr %i, align 4
  br label %1

1:                                                ; preds = %5, %0
  %2 = load i32, ptr %i, align 4
  %3 = icmp ult i32 %2, 10
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %4
  %6 = load i32, ptr %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, ptr %i, align 4
  br label %1

8:                                                ; preds = %1
  ret void
}
END


BEGIN For integer range with internal declaration
void f() {
    for (unsigned i = 1; i < 10; ++i) {}
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 1, ptr %i, align 4
  br label %1

1:                                                ; preds = %5, %0
  %2 = load i32, ptr %i, align 4
  %3 = icmp ult i32 %2, 10
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %4
  %6 = load i32, ptr %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, ptr %i, align 4
  br label %1

8:                                                ; preds = %1
  ret void
}
END


BEGIN Break for loop
void f() {
    for (int i = 0; i < 10; ++i) {
        break;
    }
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  br label %1

1:                                                ; preds = %5, %0
  %2 = load i32, ptr %i, align 4
  %3 = icmp slt i32 %2, 10
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  br label %8

5:                                                ; preds = %9
  %6 = load i32, ptr %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, ptr %i, align 4
  br label %1

8:                                                ; preds = %4, %1
  ret void

9:                                                ; No predecessors!
  br label %5
}
END


BEGIN Continue for loop
void f() {
    for (int i = 0; i < 10; ++i) {
        continue;
    }
}
EXPECT_IR
define void @f() {
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  br label %1

1:                                                ; preds = %5, %0
  %2 = load i32, ptr %i, align 4
  %3 = icmp slt i32 %2, 10
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %9, %4
  %6 = load i32, ptr %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, ptr %i, align 4
  br label %1

8:                                                ; preds = %1
  ret void

9:                                                ; No predecessors!
  br label %5
}
END


BEGIN Break in for loop causes destructors to be called
struct S {
    int x;
    void destructor(S&);
};
void f() {
    for (int i = 0; i < 10; ++i) {
        S s = {1};
        break;
    }
}
EXPECT_IR
%S = type { i32 }

define void @f() {
  %s = alloca %S, align 8
  %i = alloca i32, align 4
  store i32 0, ptr %i, align 4
  br label %1

1:                                                ; preds = %5, %0
  %2 = load i32, ptr %i, align 4
  %3 = icmp slt i32 %2, 10
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  store %S { i32 1 }, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  br label %8

5:                                                ; preds = %9
  %6 = load i32, ptr %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, ptr %i, align 4
  br label %1

8:                                                ; preds = %4, %1
  ret void

9:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %s)
  br label %5
}

declare void @destructor(ptr)

declare void @destructor_wrapper(ptr)
END


REM ******** GoToStatement ********

BEGIN Goto prior label
void f() {
target:
    goto target;
}
EXPECT_IR
define void @f() {
  br label %target

target:                                           ; preds = %target, %0
  br label %target
}
END


BEGIN Goto following label
void f() {
    goto target;
target:
    return;
}
EXPECT_IR
define void @f() {
  br label %target

target:                                           ; preds = %0
  ret void
}
END


BEGIN Goto calls destructors before branching (1)
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S t = {1};
    {
        S s = {1};
        goto target;
    }
    {
target:
        return;
    }
}
EXPECT_IR
%S = type { i32 }

define void @f() {
  %s = alloca %S, align 8
  %t = alloca %S, align 8
  store %S { i32 1 }, ptr %t, align 4
  store %S { i32 1 }, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  br label %target

1:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %s)
  unreachable

target:                                           ; preds = %0
  call void @destructor_wrapper(ptr %t)
  ret void

2:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %t)
  unreachable
}

declare void @destructor(ptr)

declare void @destructor_wrapper(ptr)
END


BEGIN Goto calls destructors before branching (2)
struct S {
    int x;
    void destructor(S&);
};
void f() {
    S t = {1};
    {
target:
        t.x = 2;
    }
    {
        S s = {1};
        goto target;
    }
}
EXPECT_IR
%S = type { i32 }

define void @f() {
  %s = alloca %S, align 8
  %t = alloca %S, align 8
  store %S { i32 1 }, ptr %t, align 4
  br label %target

target:                                           ; preds = %target, %0
  %x = getelementptr inbounds %S, ptr %t, i32 0, i32 0
  store i32 2, ptr %x, align 4
  store %S { i32 1 }, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  br label %target

1:                                                ; No predecessors!
  call void @destructor_wrapper(ptr %s)
  call void @destructor_wrapper(ptr %t)
  unreachable
}

declare void @destructor(ptr)

declare void @destructor_wrapper(ptr)
END


BEGIN Error on break outside appropriate construct
void f() {
    break;
}
EXPECT_MESSAGE
:2:5: error 'break' statement not in loop or switch statement
END


BEGIN Error on continue outside appropriate construct
void f() {
    continue;
}
EXPECT_MESSAGE
:2:5: error 'continue' statement not in loop or switch statement
END


REM ******** IfElseStatement ********

BEGIN If statement
void f(int c) {
    if (c) {}
}
EXPECT_IR
define void @f(i32 %0) {
  %c = alloca i32, align 4
  store i32 %0, ptr %c, align 4
  %2 = load i32, ptr %c, align 4
  %3 = trunc i32 %2 to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %4, %1
  ret void
}
END


BEGIN If-else statement
void f(int c) {
    if (c) {}
    else {}
}
EXPECT_IR
define void @f(i32 %0) {
  %c = alloca i32, align 4
  store i32 %0, ptr %c, align 4
  %2 = load i32, ptr %c, align 4
  %3 = trunc i32 %2 to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %5, %4
  ret void
}
END



REM ******** ReturnStatement ********

BEGIN Emit explicit return void
void f() {
    return;
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit implicit return void
void f() {
}
EXPECT_IR
define void @f() {
  ret void
}
END


BEGIN Emit return constant
int f() {
    return 0;
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (1)
int f() {
}
EXPECT_IR
define i32 @f() {
  ret i32 0
}
END


BEGIN Emit implicit return null value (2)
struct S { int x; };
S f() {
}
EXPECT_IR
%S = type { i32 }

define %S @f() {
  ret %S zeroinitializer
}
END


BEGIN Return void value from void function
void g() {}
void f() {
    return g();
}
END


BEGIN Error on return value in void function
void f() {
    return 1;
}
EXPECT_MESSAGE
:2:12: error void function 'f' should not return a value
:1:6: ... see return type of function 'f'
END


BEGIN Error on missing return value in non-void function
int f() {
    return;
}
EXPECT_MESSAGE
:2:5: error non-void function 'f' should return a value
:1:5: ... see return type of function 'f'
END


BEGIN Return statement causes destructors in all scopes to be called
struct S {
    int x;
    void destructor(S&) {}
};
int who_knows();
void f(S s) {
    {
        S t = {1};
        if (who_knows()) return;
    }
}
EXPECT_IR
%S = type { i32 }

declare i32 @who_knows()

define void @f(%S %0) {
  %t = alloca %S, align 8
  %s = alloca %S, align 8
  store %S %0, ptr %s, align 4
  store %S { i32 1 }, ptr %t, align 4
  %2 = call i32 @who_knows()
  %3 = trunc i32 %2 to i1
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  call void @destructor_wrapper(ptr %t)
  call void @destructor_wrapper(ptr %s)
  ret void

5:                                                ; preds = %6, %1
  call void @destructor_wrapper(ptr %t)
  call void @destructor_wrapper(ptr %s)
  ret void

6:                                                ; No predecessors!
  br label %5
}

define void @destructor(ptr %0) {
  ret void
}

declare void @destructor_wrapper(ptr)
END


BEGIN Return value has reference type
int x;
const int& f() {
    return x;
}
int g() {
    return f();
}
EXPECT_IR
@x = global i32 0

define ptr @f() {
  ret ptr @x
}

define i32 @g() {
  %1 = call ptr @f()
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}
END


BEGIN Rvalue return value has reference type
const int& f() {
    return 1;
}
EXPECT_MESSAGE
:2:12: error cannot return reference of type 'int const&' to rvalue
END


BEGIN Cannot return reference to more qualified lvalue
const int x;
volatile int& f() {
    return x;
}
EXPECT_MESSAGE
:3:12: error binding reference type 'int volatile&' to value of type 'int const' discards type qualifier
END


BEGIN Cannot return reference to less qualified lvalue
int x;
volatile int& f() {
    return x;
}
END


REM ******** SwitchStatement ********

BEGIN Switch with default
int f(int x) {
    switch (x) {
        default:
            return 21;
        case 7:
            x = 3;
            // falls through
        case 1+1:
            return 2;
        case 3:
            break;
    }
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  switch i32 %2, label %4 [
    i32 7, label %5
    i32 2, label %6
    i32 3, label %7
  ]

3:                                                ; preds = %8, %7
  ret i32 0

4:                                                ; preds = %1
  ret i32 21

5:                                                ; preds = %1
  store i32 3, ptr %x, align 4
  br label %6

6:                                                ; preds = %5, %1
  ret i32 2

7:                                                ; preds = %1
  br label %3

8:                                                ; No predecessors!
  br label %3
}
END

BEGIN Switch without default
int f(int x) {
    switch (x) {
        case 7:
            x = 3;
            // falls through
        case 1+1:
            return 2;
        case 3:
            break;
    }
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  switch i32 %2, label %3 [
    i32 7, label %4
    i32 2, label %5
    i32 3, label %6
  ]

3:                                                ; preds = %7, %6, %1
  ret i32 0

4:                                                ; preds = %1
  store i32 3, ptr %x, align 4
  br label %5

5:                                                ; preds = %4, %1
  ret i32 2

6:                                                ; preds = %1
  br label %3

7:                                                ; No predecessors!
  br label %3
}
END


BEGIN Case expressions must be integer
int f(int x) {
    switch (x) {
        case 1.5:
            break;
    }
}
EXPECT_MESSAGE
:3:14: error case must have integer constant expression
END
