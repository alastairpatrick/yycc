// ConditionExpr

BEGIN Condition operator
int f(_Bool c, int a, int b) {
    return c ? (a+1) : (b-1);
}
EXPECT_IR
define i32 @f(i1 %0, i32 %1, i32 %2) {
  %c = alloca i1, align 1
  store i1 %0, ptr %c, align 1
  %a = alloca i32, align 4
  store i32 %1, ptr %a, align 4
  %b = alloca i32, align 4
  store i32 %2, ptr %b, align 4
  %4 = load i1, ptr %c, align 1
  br i1 %4, label %then, label %else

then:                                             ; preds = %3
  %5 = load i32, ptr %a, align 4
  %6 = add i32 %5, 1
  br label %merge

else:                                             ; preds = %3
  %7 = load i32, ptr %b, align 4
  %8 = sub i32 %7, 1
  br label %merge

merge:                                            ; preds = %else, %then
  %cond = phi i32 [ %6, %then ], [ %8, %else ]
  ret i32 %cond
}
END


// AddressExpr

BEGIN Function returning address of global int
int v;
int* f() {
    return &v;
}
EXPECT_IR
@v = global i32 0

define ptr @f() {
  ret ptr @v
}
END


BEGIN Function returning address of global array
int v[2];
int* f() {
    return &v;
}
EXPECT_IR
@v = global [2 x i32] zeroinitializer

define ptr @f() {
  ret ptr @v
}
END


BEGIN Function returning address of array element
int v[2];
int* f() {
    return &v[1];
}
EXPECT_IR
@v = global [2 x i32] zeroinitializer

define ptr @f() {
  ret ptr getelementptr inbounds ([2 x i32], ptr @v, i64 0, i32 1)
}
END


BEGIN Global initialized with address of other global
int a;
int* b = &a;
EXPECT_IR
@a = global i32 0
@b = global ptr @a
END


// CallExpr

BEGIN Call function
void f() {}
void g() {
    f();
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  call void @f()
  ret void
}
END


BEGIN Pass parameter in function call
void f(short) {}
void g() {
    f(7);
}
EXPECT_IR
define void @f(i16 %0) {
  %2 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  ret void
}

define void @g() {
  call void @f(i16 7)
  ret void
}
END


BEGIN Function call returns result
int f() {
    return 7;
}
void g() {
    int x = f();
}
EXPECT_IR
define i32 @f() {
  ret i32 7
}

define void @g() {
  %x = alloca i32, align 4
  %1 = call i32 @f()
  store i32 %1, ptr %x, align 4
  ret void
}
END


BEGIN Call function via pointer
void f() {}
void (*fp)() = f;
void g() {
    fp();
}
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}

define void @g() {
  %1 = load ptr, ptr @fp, align 8
  call void %1()
  ret void
}
END


// DereferenceExpr

BEGIN Dereference global pointer
int* p;
int f() {
    return *p;
}
EXPECT_IR
@p = global ptr null

define i32 @f() {
  %1 = load ptr, ptr @p, align 8
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}
END


BEGIN Dereference operator yields an lvalue
int* p;
void f() {
    *p = 2;
}
EXPECT_IR
@p = global ptr null

define void @f() {
  %1 = load ptr, ptr @p, align 8
  store i32 2, ptr %1, align 4
  ret void
}
END


BEGIN Volatile store through dereference operator
volatile int* p;
void f() {
    *p = 2;
}
EXPECT_IR
@p = global ptr null

define void @f() {
  %1 = load ptr, ptr @p, align 8
  store volatile i32 2, ptr %1, align 4
  ret void
}
END


BEGIN Volatile load through dereference operator
volatile int* p;
int f() {
    return *p;
}
EXPECT_IR
@p = global ptr null

define i32 @f() {
  %1 = load ptr, ptr @p, align 8
  %2 = load volatile i32, ptr %1, align 4
  ret i32 %2
}
END


// EntityExpr

BEGIN Value of local variable
int f() {
    int x = 3;
    return x;
}
EXPECT_IR
define i32 @f() {
  %x = alloca i32, align 4
  store i32 3, ptr %x, align 4
  %1 = load i32, ptr %x, align 4
  ret i32 %1
}
END


BEGIN Value of enum
enum { RED, GREEN = 7, BLUE };
int f() {
    return GREEN;
}
EXPECT_IR
define i32 @f() {
  ret i32 7
}
END


// SubscriptExpr

BEGIN Subscript operator on pointer (1)
int f(int* p) {
    return p[1];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscript operator on pointer (2)
int f(int* p) {
    return 1[p];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscripted pointer is lvalue
int f(int* p) {
    p[1] = 2;
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  store i32 2, ptr %3, align 4
  ret i32 0
}
END


BEGIN Subscript operator on array
int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END


BEGIN Subscripted array is lvalue
int a[10];
int f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  store i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 0
}
END


BEGIN Volatile store array element
volatile int a[10];
void f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define void @f() {
  store volatile i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret void
}
END


BEGIN Volatile load array element
volatile int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load volatile i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END
