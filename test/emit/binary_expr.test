REM ******** Integer ********

BEGIN Integer addition
int f(int x) {
    return x + 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer subtraction
int f(int x) {
    return x - 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer multiplication
int f(int x) {
    return x * 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = mul i32 %2, 1
  ret i32 %3
}
END


BEGIN Signed integer multiplication
int f(int x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sdiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer bitwise AND
int f(int x) {
    return x & 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = and i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer bitwise OR
int f(int x) {
    return x | 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = or i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer bitwise XOR
int f(int x) {
    return x ^ 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = xor i32 %2, 1
  ret i32 %3
}
END



BEGIN Integer left shift
int f(int x) {
    return x << 1ULL;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = shl i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer logical right shift
unsigned f(unsigned x) {
    return x >> 1ULL;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = lshr i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer arithmwetic right shift
int f(int x) {
    return x >> 1ULL;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = ashr i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer signed less than
_Bool f(int x) {
    return x < 1;
}
EXPECT_IR
define i1 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = icmp slt i32 %2, 1
  ret i1 %3
}
END


BEGIN Integer unsigned less than
_Bool f(unsigned x) {
    return x < 1u;
}
EXPECT_IR
define i1 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = icmp ult i32 %2, 1
  ret i1 %3
}
END


BEGIN Pointer divided by integer is an error
void f(int* (*p)[1][2], int x) {
    p / x;
}
EXPECT_MESSAGE
:2:7: error '/' operation may not be evaluated with operands of types 'int*(*)[1][2]' and 'int'
END


REM ******** Floating point ********

BEGIN Unsigned integer multiplication
unsigned f(unsigned x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = udiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Floating point addition
float f(float x) {
    return x + 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fadd float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point subtraction
float f(float x) {
    return x - 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fsub float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point multiplication
float f(float x) {
    return x * 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fmul float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point division
float f(float x) {
    return x / 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fdiv float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point signed less than
_Bool f(float x) {
    return x < 1.0f;
}
EXPECT_IR
define i1 @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fcmp olt float %2, 1.000000e+00
  ret i1 %3
}
END


BEGIN Logical AND
_Bool f(float x, float y) {
    return x && y;
}
EXPECT_IR
define i1 @f(float %0, float %1) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %y = alloca float, align 4
  store float %1, ptr %y, align 4
  %3 = load float, ptr %x, align 4
  %4 = fptoui float %3 to i1
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = load float, ptr %y, align 4
  %7 = fptoui float %6 to i1
  br label %8

8:                                                ; preds = %5, %2
  %9 = phi i1 [ %4, %2 ], [ %7, %5 ]
  ret i1 %9
}
END


BEGIN Logical AND constant expression (1)
int x = 0 && 0;
EXPECT_IR
@x = global i32 0
END


BEGIN Logical AND constant expression (2)
int x = 0 && 1;
EXPECT_IR
@x = global i32 0
END


BEGIN Logical AND constant expression (3)
int x = 1 && 0;
EXPECT_IR
@x = global i32 0
END


BEGIN Logical AND constant expression (4)
int x = 1 && 1;
EXPECT_IR
@x = global i32 1
END


BEGIN Logical OR
_Bool f(int* x) {
    float y[1];
    return x || y;
}
EXPECT_IR
define i1 @f(ptr %0) {
  %y = alloca [1 x float], align 4
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  %3 = ptrtoint ptr %2 to i1
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = ptrtoint ptr %y to i1
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi i1 [ %3, %1 ], [ %5, %4 ]
  ret i1 %7
}
END


BEGIN Logical AND constant expression (1)
int x = 0 || 0;
EXPECT_IR
@x = global i32 0
END


BEGIN Logical AND constant expression (2)
int x = 0 || 1;
EXPECT_IR
@x = global i32 1
END


BEGIN Logical AND constant expression (3)
int x = 1 || 0;
EXPECT_IR
@x = global i32 1
END


BEGIN Logical AND constant expression (4)
int x = 1 || 1;
EXPECT_IR
@x = global i32 1
END


REM ******** Pointer arithmetic ********

BEGIN Pointer addition (1)
int* f(int* p) {
    return p + 1;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer addition (2)
int* f(int* p) {
    return 1 + p;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer addition (3)
const int* f(const int* p) {
    return p + 1;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer addition (4)
enum E: char { A = 1 };
const int* f(const int* p) {
    return p + A;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer subtraction
int* f(int* p) {
    return p - 1;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 -1
  ret ptr %3
}
END


BEGIN Cannot add float to pointer
int* f(int* p) {
    return p + 1.0;
}
EXPECT_MESSAGE
:2:14: error '+' operation may not be evaluated with operands of types 'int*' and 'double'
END


BEGIN Pointer subtraction
long long f(int* p, const int* q) {
    return p - q;
}
EXPECT_IR
define i64 @f(ptr %0, ptr %1) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %q = alloca ptr, align 8
  store ptr %1, ptr %q, align 8
  %3 = load ptr, ptr %q, align 8
  %4 = load ptr, ptr %p, align 8
  %5 = ptrtoint ptr %4 to i64
  %6 = ptrtoint ptr %3 to i64
  %7 = sub i64 %5, %6
  %8 = sdiv exact i64 %7, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  ret i64 %8
}
END


BEGIN Error on subtraction of different types
long long f(int* p, float* q) {
    return p - q;
}
EXPECT_MESSAGE
:2:14: error '-' operation may not be evaluated with operands of types 'int*' and 'float*'
END


BEGIN Array pointer addition (1)
int* f() {
    int a[10];
    return a + 1;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END


BEGIN Array pointer addition (2)
int* f() {
    int a[10];
    return 1 + a;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END


BEGIN Array pointer addition (3)
const int* f() {
    const int a[10];
    return a + 1;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END


BEGIN Pointer < comparison
_Bool f(int* p, const int* q) {
    return p < q;
}
EXPECT_IR
define i1 @f(ptr %0, ptr %1) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %q = alloca ptr, align 8
  store ptr %1, ptr %q, align 8
  %3 = load ptr, ptr %q, align 8
  %4 = load ptr, ptr %p, align 8
  %5 = icmp ult ptr %4, %3
  ret i1 %5
}
END


BEGIN Pointer == comparison
_Bool f(int* p, const int* q) {
    return p == q;
}
EXPECT_IR
define i1 @f(ptr %0, ptr %1) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %q = alloca ptr, align 8
  store ptr %1, ptr %q, align 8
  %3 = load ptr, ptr %q, align 8
  %4 = load ptr, ptr %p, align 8
  %5 = icmp eq ptr %4, %3
  ret i1 %5
}
END


BEGIN Pointer == 0 comparison
_Bool f(int* p) {
    return p == 0;
}
EXPECT_IR
define i1 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = icmp eq ptr %2, null
  ret i1 %3
}
END


BEGIN Pointer != 0 comparison
_Bool f(int* p) {
    return 0 != p;
}
EXPECT_IR
define i1 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = icmp ne ptr %2, null
  ret i1 %3
}
END


REM ******** Void ********

BEGIN Cannot apply binary operation to void (1)
void f() {}
int g() {
    return f() + f();
}
EXPECT_MESSAGE
:3:16: error '+' operation may not be evaluated with operands of types 'void' and 'void'
END


BEGIN Cannot apply binary operation to void (2)
void f() {}
int g() {
    return 1 + f();
}
EXPECT_MESSAGE
:3:14: error '+' operation may not be evaluated with operands of types 'int' and 'void'
END


BEGIN Cannot apply binary operation to void (3)
void f() {}
int g() {
    return f() + 1;
}
EXPECT_MESSAGE
:3:16: error '+' operation may not be evaluated with operands of types 'void' and 'int'
END
