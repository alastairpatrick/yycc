BEGIN Integer addition
int f(int x) {
    return x + 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer subtraction
int f(int x) {
    return x - 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer multiplication
int f(int x) {
    return x * 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = mul i32 %2, 1
  ret i32 %3
}
END


BEGIN Signed integer multiplication
int f(int x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sdiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Unsigned integer multiplication
unsigned f(unsigned x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = udiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Floating point addition
float f(float x) {
    return x + 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fadd float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point subtraction
float f(float x) {
    return x - 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fsub float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point multiplication
float f(float x) {
    return x * 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fmul float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point division
float f(float x) {
    return x / 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fdiv float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Pointer addition (1)
int* f(int* p) {
    return p + 1;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer addition (1)
int* f(int* p) {
    return 1 + p;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer addition (3)
const int* f(const int* p) {
    return p + 1;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  ret ptr %3
}
END


BEGIN Pointer subtraction
long long f(int* p, int* q) {
    return p - q;
}
EXPECT_IR
define i64 @f(ptr %0, ptr %1) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %q = alloca ptr, align 8
  store ptr %1, ptr %q, align 8
  %3 = load ptr, ptr %p, align 8
  %4 = ptrtoint ptr %3 to i64
  %5 = load ptr, ptr %q, align 8
  %6 = ptrtoint ptr %5 to i64
  %7 = sub i64 %4, %6
  %8 = sdiv i64 %7, 4
  ret i64 %8
}
END


BEGIN Array pointer addition (1)
int* f() {
    int a[10];
    return a + 1;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  store [10 x i32] zeroinitializer, ptr %a, align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END


BEGIN Array pointer addition (2)
int* f() {
    int a[10];
    return 1 + a;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  store [10 x i32] zeroinitializer, ptr %a, align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END


BEGIN Array pointer addition (3)
const int* f() {
    const int a[10];
    return a + 1;
}
EXPECT_IR
define ptr @f() {
  %a = alloca [10 x i32], align 4
  store [10 x i32] zeroinitializer, ptr %a, align 4
  %1 = getelementptr [10 x i32], ptr %a, i64 0, i64 0
  %2 = getelementptr i32, ptr %1, i32 1
  ret ptr %2
}
END
