BEGIN Integer addition
int f(int x) {
    return x + 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer subtraction
int f(int x) {
    return x - 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  ret i32 %3
}
END


BEGIN Integer multiplication
int f(int x) {
    return x * 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = mul i32 %2, 1
  ret i32 %3
}
END


BEGIN Signed integer multiplication
int f(int x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sdiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Unsigned integer multiplication
unsigned f(unsigned x) {
    return x / 1;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = udiv i32 %2, 1
  ret i32 %3
}
END


BEGIN Floating point addition
float f(float x) {
    return x + 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fadd float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point subtraction
float f(float x) {
    return x - 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fsub float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point multiplication
float f(float x) {
    return x * 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fmul float %2, 1.000000e+00
  ret float %3
}
END


BEGIN Floating point division
float f(float x) {
    return x / 1;
}
EXPECT_IR
define float @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fdiv float %2, 1.000000e+00
  ret float %3
}
END


