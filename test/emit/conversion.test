BEGIN Integer signedness only conversion
unsigned f(int x) {
    return x;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Integer zero extending conversion
unsigned f(unsigned short x) {
    return x;
}
EXPECT_IR
define i32 @f(i16 %0) {
  %x = alloca i16, align 2
  store i16 %0, ptr %x, align 2
  %2 = load i16, ptr %x, align 2
  %3 = zext i16 %2 to i32
  ret i32 %3
}
END


BEGIN Integer sign extending conversion
int f(short x) {
    return x;
}
EXPECT_IR
define i32 @f(i16 %0) {
  %x = alloca i16, align 2
  store i16 %0, ptr %x, align 2
  %2 = load i16, ptr %x, align 2
  %3 = sext i16 %2 to i32
  ret i32 %3
}
END


BEGIN Integer truncating conversion
short f(int x) {
    return x;
}
EXPECT_IR
define i16 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = trunc i32 %2 to i16
  ret i16 %3
}
END


BEGIN Floating point extending conversion
double f(float x) {
    return x;
}
EXPECT_IR
define double @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fpext float %2 to double
  ret double %3
}
END


BEGIN Floating point truncating conversion
float f(double x) {
    return x;
}
EXPECT_IR
define float @f(double %0) {
  %x = alloca double, align 8
  store double %0, ptr %x, align 8
  %2 = load double, ptr %x, align 8
  %3 = fptrunc double %2 to float
  ret float %3
}
END


BEGIN Signed integer to floating point conversion
float f(int x) {
    return x;
}
EXPECT_IR
define float @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sitofp i32 %2 to float
  ret float %3
}
END


BEGIN Unsigned integer to floating point conversion
float f(unsigned x) {
    return x;
}
EXPECT_IR
define float @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = uitofp i32 %2 to float
  ret float %3
}
END


BEGIN Floating point to signed integer conversion
int f(float x) {
    return x;
}
EXPECT_IR
define i32 @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fptosi float %2 to i32
  ret i32 %3
}
END


BEGIN Floating point to unsigned integer conversion
unsigned f(float x) {
    return x;
}
EXPECT_IR
define i32 @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fptoui float %2 to i32
  ret i32 %3
}
END


BEGIN Enum to integer conversion
enum E { A };
short f(E x) {
    return x;
}
END


BEGIN Integer to enum conversion
enum E { A };
E f(short x) {
    return (E) x;
}
END


BEGIN Error on implcit integer to enum conversion
enum E { A };
E f(short x) {
    return x;
}
EXPECT_MESSAGE
:3:12: error conversion from type 'short' to type 'enum E' requires explicit cast
END


BEGIN Enum to floating point conversion
enum E { A };
float f(E x) {
    return x;
}
END


BEGIN Floating point to enum conversion
enum E { A };
E f(float x) {
    return (E) x;
}
END


BEGIN Error on implcit floating point to enum conversion
enum E { A };
E f(float x) {
    return x;
}
EXPECT_MESSAGE
:3:12: error conversion from type 'float' to type 'enum E' requires explicit cast
END


BEGIN Convert non-void pointer to void pointer (1)
void* f(int* x) {
    return x;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  ret ptr %2
}
END


BEGIN Pointer to qualified -> pointer to unqualifed conversion
int* f(const int* x) {
    return x;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  ret ptr %2
}
EXPECT_MESSAGE
:2:12: contextual error conversion from type 'int const*' to type 'int*' requires explicit cast
END


BEGIN Pointer to unqualified -> pointer to qualifed conversion
const int* f(int* x) {
    return x;
}
EXPECT_IR
define ptr @f(ptr %0) {
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  ret ptr %2
}
END


BEGIN Convert non-void pointer to void pointer (2)
void* f(void** x) {
    return x;
}
END


BEGIN Convert void pointer to non-void pointer
int* f(void* x) {
    return x;
}
EXPECT_MESSAGE
:2:12: contextual error conversion from type 'void*' to type 'int*' requires explicit cast
END


BEGIN Convert pointers to different base types
void** f(int** x) {
    return x;
}
EXPECT_MESSAGE
:2:12: contextual error conversion from type 'int**' to type 'void**' requires explicit cast
END


BEGIN Error on discarding qualifiers during pointer conversion (1)
int* f(const int* x) {
    return x;
}
EXPECT_MESSAGE
:2:12: contextual error conversion from type 'int const*' to type 'int*' requires explicit cast
END


BEGIN Error on discarding qualifiers during pointer conversion (2)
const int** f(volatile int** x) {
    return x;
}
EXPECT_MESSAGE
:2:12: contextual error conversion from type 'int volatile**' to type 'int const**' requires explicit cast
END


BEGIN Array to pointer conversion
int a[2];
int* f() {
    return a;
}
END


BEGIN Error on converting array to pointer with different base types
float a[2];
int* f() {
    return a;
}
EXPECT_MESSAGE
:3:12: contextual error conversion from type 'float[2]' to type 'int*' requires explicit cast
END


BEGIN Captured reference to array to pointer
float* f(float (& std::captured a)[2]) {
    return a;
}
END


BEGIN Error on converting non-captured reference to array to pointer
float* f(float a[2]) {
    return a;
}
EXPECT_MESSAGE
:2:12: error cannot convert from type 'float[2]' to type 'float*'
END


BEGIN Pointer to integer conversion
short f(int* x) {
    return (short) x;
}
EXPECT_IR
define i16 @f(ptr %0) {
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  %3 = ptrtoint ptr %2 to i16
  ret i16 %3
}
END


BEGIN Integer to pointer conversion
int* f(long x) {
    return (int*) x;
}
EXPECT_IR
define ptr @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = inttoptr i32 %2 to ptr
  ret ptr %3
}
END


BEGIN Qualified to unqualifed conversion
int f(const int x) {
    return x;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Unqualified to qualifed conversion
const int f(int x) {
    return x;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Qualified to qualifed conversion
volatile int f(volatile short x) {
    return x;
}
EXPECT_IR
define i32 @f(i16 %0) {
  %x = alloca i16, align 2
  store volatile i16 %0, ptr %x, align 2
  %2 = load volatile i16, ptr %x, align 2
  %3 = sext i16 %2 to i32
  ret i32 %3
}
END


BEGIN Cannot convert array to integer without explicit cast
void f() {
    char a[10];
    int x = a;
}
EXPECT_MESSAGE
:3:13: error conversion from type 'char[10]' to type 'int' requires explicit cast
END


BEGIN Cannot convert integer to array
char a[10] = 1;
EXPECT_MESSAGE
:1:14: error cannot convert from type 'int' to type 'char[10]'
END


BEGIN Cannot convert pointer to float
float f;
float g = &f;
EXPECT_MESSAGE
:2:11: error cannot convert from type 'float*' to type 'float'
END


BEGIN Cannot convert float to array
char a[10] = 2.0f;
EXPECT_MESSAGE
:1:14: error cannot convert from type 'float' to type 'char[10]'
END


BEGIN Cannot convert function to float
void f() {}
float x = f;
EXPECT_MESSAGE
:2:11: error cannot convert from type 'void()' to type 'float'
END


BEGIN Cannot implicitly convert integer to pointer
void *p = (int) 0;
EXPECT_MESSAGE
:1:11: error conversion from type 'int' to type 'void*' requires explicit cast
END


BEGIN Can implicitly convert literal zero to pointer
void *p = 0;
END


BEGIN Cannot implicitly convert function pointer to void pointer
void f() {}
void* p = &f;
EXPECT_MESSAGE
:2:11: error conversion from type 'void(*)()' to type 'void*' requires explicit cast
END


BEGIN Cannot implicitly convert void pointer to function pointer
int x;
void (*p)() = &x;
EXPECT_MESSAGE
:2:15: error conversion from type 'int*' to type 'void(*)()' requires explicit cast
END


BEGIN Cannot implicitly convert function to pointer to other type
void f() {}
void (*fp)(int) = f;
EXPECT_MESSAGE
:2:19: error conversion from type 'void()' to type 'void(*)(int)' requires explicit cast
END
