REM ******** General ********

BEGIN Calls destructor on temporary after full expression
struct S {
    int x;
    void destructor(S&) {}
};
S g();
void f() {
    g(), g();
    g();
}
EXPECT_IR
%S = type { i32 }

declare %S @g()

define void @f() {
  %1 = alloca %S, align 8
  %2 = alloca %S, align 8
  %3 = alloca %S, align 8
  %4 = call %S @g()
  store %S %4, ptr %3, align 4
  %5 = call %S @g()
  store %S %5, ptr %2, align 4
  call void @destructor_wrapper(ptr %2)
  call void @destructor_wrapper(ptr %3)
  %6 = call %S @g()
  store %S %6, ptr %1, align 4
  call void @destructor_wrapper(ptr %1)
  ret void
}

define void @destructor(ptr nocapture %0) {
  ret void
}

declare void @destructor_wrapper(ptr)
END



REM ******** ConditionExpr ********

BEGIN Condition expression in constant expression (1)
int a = 1 ? 2 : 3;
EXPECT_IR
@a = global i32 2
END


BEGIN Condition expression in constant expression (2)
int a = 0 ? 2 : 3;
EXPECT_IR
@a = global i32 3
END


BEGIN Emits select instruction for condition expression where condition is a constant expressions (1)
int g();
int h();
int f() {
    return 1 ? g() : h();
}
EXPECT_IR
declare i32 @g()

declare i32 @h()

define i32 @f() {
  %1 = call i32 @g()
  ret i32 %1
}
END


BEGIN Emits select instruction for condition expression where condition is a constant expressions (2)
int g();
int h();
int f() {
    return 0 ? g() : h();
}
EXPECT_IR
declare i32 @g()

declare i32 @h()

define i32 @f() {
  %1 = call i32 @h()
  ret i32 %1
}
END


BEGIN Condition expression applies usual arithmetic conversions
int f(_Bool c, _Bool a, short b) {
    return c ? (a+1) : (b-1);
}
EXPECT_IR
define i32 @f(i1 %0, i1 %1, i16 %2) {
  %c = alloca i1, align 1
  store i1 %0, ptr %c, align 1
  %a = alloca i1, align 1
  store i1 %1, ptr %a, align 1
  %b = alloca i16, align 2
  store i16 %2, ptr %b, align 2
  %4 = load i1, ptr %c, align 1
  br i1 %4, label %5, label %9

5:                                                ; preds = %3
  %6 = load i1, ptr %a, align 1
  %7 = zext i1 %6 to i32
  %8 = add i32 %7, 1
  br label %13

9:                                                ; preds = %3
  %10 = load i16, ptr %b, align 2
  %11 = sext i16 %10 to i32
  %12 = sub i32 %11, 1
  br label %13

13:                                               ; preds = %9, %5
  %14 = phi i32 [ %8, %5 ], [ %12, %9 ]
  ret i32 %14
}
END


BEGIN Condition operator applied to same struct
struct S { int x; };
S f(_Bool c, S a, S b) {
    return c ? a : b;
}
EXPECT_IR
%S = type { i32 }

define %S @f(i1 %0, %S %1, %S %2) {
  %c = alloca i1, align 1
  store i1 %0, ptr %c, align 1
  %a = alloca %S, align 8
  store %S %1, ptr %a, align 4
  %b = alloca %S, align 8
  store %S %2, ptr %b, align 4
  %4 = load i1, ptr %c, align 1
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = load %S, ptr %a, align 4
  br label %9

7:                                                ; preds = %3
  %8 = load %S, ptr %b, align 4
  br label %9

9:                                                ; preds = %7, %5
  %10 = phi %S [ %6, %5 ], [ %8, %7 ]
  ret %S %10
}
END


BEGIN Condition operator applied to different structs
struct S { int x; };
struct T { int x; };
S f(_Bool c, S a, T b) {
    return c ? a : b;
}
EXPECT_MESSAGE
:4:14: error incompatible conditional operand types 'struct S' and 'struct T'
END


BEGIN Condition operator with both void operands
void g();
int f(_Bool c) {
    c ? g() : g();
}
EXPECT_IR
declare void @g()

define i32 @f(i1 %0) {
  %c = alloca i1, align 1
  store i1 %0, ptr %c, align 1
  %2 = load i1, ptr %c, align 1
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  call void @g()
  br label %5

4:                                                ; preds = %1
  call void @g()
  br label %5

5:                                                ; preds = %4, %3
  ret i32 0
}
END


BEGIN Error if condition is void
void f() {}
int g(int a, int b) {
    return f() ? a : b;
}
EXPECT_MESSAGE
:3:13: error cannot convert from type 'void' to type 'bool'
END


BEGIN Error if consequent or alternate are void (1)
void f() {}
int g(_Bool c) {
    return c ? 1 : f();
}
EXPECT_MESSAGE
:3:14: error incompatible conditional operand types 'int' and 'void'
END


BEGIN Error if consequent or alternate are void (2)
void f() {}
int g(_Bool c) {
    return c ? f() : 1;
}
EXPECT_MESSAGE
:3:14: error incompatible conditional operand types 'void' and 'int'
END


REM ******** AddressExpr ********


BEGIN Constant expression may take address of variable
int x;
int* y = &x;
EXPECT_IR
@x = global i32 0
@y = global ptr @x
END


BEGIN Function returning address of global int
int v;
int* f() {
    return &v;
}
EXPECT_IR
@v = global i32 0

define ptr @f() {
  ret ptr @v
}
END


BEGIN Function returning address of global array
int v[2];
int (*f())[2] {
    return &v;
}
EXPECT_IR
@v = global [2 x i32] zeroinitializer

define ptr @f() {
  ret ptr @v
}
END


BEGIN Function returning address of array element
int v[2];
int* f() {
    return &v[1];
}
EXPECT_IR
@v = global [2 x i32] zeroinitializer

define ptr @f() {
  ret ptr getelementptr inbounds ([2 x i32], ptr @v, i64 0, i32 1)
}
END


BEGIN Global initialized with address of other global
int a;
int* b = &a;
EXPECT_IR
@a = global i32 0
@b = global ptr @a
END


BEGIN May not take address of rvalue
int *p = &1;
EXPECT_MESSAGE
:1:10: error cannot take address of rvalue of type 'int'
END


REM ******** CallExpr ********


BEGIN Constant expression may not call function
int size();
int x[1 + size()];
EXPECT_MESSAGE
:2:15: error cannot call function in constant expression
END


BEGIN Call function
void f() {}
void g() {
    f();
}
EXPECT_IR
define void @f() {
  ret void
}

define void @g() {
  call void @f()
  ret void
}
END


BEGIN Pass parameter in function call
void f(short) {}
void g() {
    f(7);
}
EXPECT_IR
define void @f(i16 %0) {
  %2 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  ret void
}

define void @g() {
  call void @f(i16 7)
  ret void
}
END


BEGIN Error if number of parameters do not match in function call
void f(short) {}
void g() {
    f(7, 8);
}
EXPECT_MESSAGE
:3:6: error expected 1 parameter(s) but got 2
:1:6: ... see prototype of function 'f'
END


BEGIN Function call returns result
int f() {
    return 7;
}
void g() {
    int x = f();
}
EXPECT_IR
define i32 @f() {
  ret i32 7
}

define void @g() {
  %x = alloca i32, align 4
  %1 = call i32 @f()
  store i32 %1, ptr %x, align 4
  ret void
}
END


BEGIN Call function via pointer
void f() {}
void (*fp)() = f;
void g() {
    fp();
}
EXPECT_IR
@fp = global ptr @f

define void @f() {
  ret void
}

define void @g() {
  %1 = load ptr, ptr @fp, align 8
  call void %1()
  ret void
}
END


BEGIN Call member function (1)
struct S {
  int f(S &this) {
    return 7;
  }
};
int g() {
  S s;
  return s.f();
}
EXPECT_IR
%S = type {}

define i32 @g() {
  %s = alloca %S, align 8
  %1 = call i32 @f(ptr %s)
  ret i32 %1
}

define i32 @f(ptr nocapture %0) {
  ret i32 7
}
END


BEGIN Call member function (2)
struct S {
  int f(S &this) {
    return 7;
  }
};
int g(S* p) {
  return p->f();
}
EXPECT_IR
define i32 @g(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = call i32 @f(ptr %2)
  ret i32 %3
}

define i32 @f(ptr nocapture %0) {
  ret i32 7
}
END


BEGIN Member function call receiver made addressable
struct S {
  S f(S &this) {
    S s;
    return s;
  }
};
void g() {
  S s;
  s.f().f();
}
EXPECT_IR
%S = type {}

define void @g() {
  %1 = alloca %S, align 8
  %s = alloca %S, align 8
  %2 = call %S @f(ptr %s)
  store %S %2, ptr %1, align 1
  %3 = call %S @f(ptr %1)
  ret void
}

define %S @f(ptr nocapture %0) {
  %s = alloca %S, align 8
  %2 = load %S, ptr %s, align 1
  ret %S %2
}
END


BEGIN Member function must have object instance parameter
struct S {
  int f() {
    return 7;
  }
};
int g(S* p) {
  return p->f();
}
EXPECT_MESSAGE
:7:14: error expected 0 parameter(s) but got 1
:2:7: ... see prototype of function 'f'
END


BEGIN Error if value passed by lvalue-reference has different type
struct S {};
struct T {};
void f(S&) {}
void g() {
    T t;
    f(t);
}
EXPECT_MESSAGE
:6:7: error lvalue type 'struct T' incompatible with pass-by-reference parameter type 'struct S&'
END


BEGIN Error if lvalue has more qualifiers than pass-by-lvalue-reference parameter
struct S {
  int f(S&) {
    return 7;
  }
};
int g(const S* p) {
  return p->f();
}
EXPECT_MESSAGE
:7:10: error lvalue type 'struct S const' has more type qualifiers than pass-by-reference parameter type 'struct S&'
END


BEGIN Rvalue passed to const parameter by lvalue-reference is converted
void f(const int&) {}
void g() {
    f(1.0);
}
EXPECT_IR
define void @f(ptr nocapture %0) {
  ret void
}

define void @g() {
  %1 = alloca i32, align 4
  store i32 1, ptr %1, align 4
  call void @f(ptr %1)
  ret void
}
END


BEGIN Rvalue passed to non-const parameter by lvalue-reference yields error
void f(int&) {}
void g() {
    f(1.0);
}
EXPECT_MESSAGE
:3:7: error rvalue type 'double' incompatible with non-const pass-by-reference parameter type 'int&'
END


BEGIN Rvalue passed by rvalue-reference is converted
void f(int&&) {}
void g() {
    f(1.0);
}
EXPECT_IR
define void @f(ptr nocapture %0) {
  ret void
}

define void @g() {
  %1 = alloca i32, align 4
  store i32 1, ptr %1, align 4
  call void @f(ptr %1)
  ret void
}
END


BEGIN Cannot pass lvalue directly to pass-by-rvalue-reference parameter
void f(int&&) {}
void g() {
    int x;
    f(x);
}
EXPECT_MESSAGE
:4:7: error cannot pass lvalue to pass-by-rvalue-reference parameter type 'int&&'; consider postfix '&&' move expression
END


BEGIN Pass move expression by rvalue-reference
void f(int&&) {}
void g() {
    int x;
    f(&&x);
}
EXPECT_IR
define void @f(ptr nocapture %0) {
  ret void
}

define void @g() {
  %1 = alloca i32, align 4
  %x = alloca i32, align 4
  %2 = load i32, ptr %x, align 4
  store i32 0, ptr %x, align 4
  store i32 %2, ptr %1, align 4
  call void @f(ptr %1)
  ret void
}
END


BEGIN Cannot move const lvalue
struct S {
    void destructor(S&);
};
void f() {
    const S x;
    &&x;
}
EXPECT_MESSAGE
:6:7: error cannot modify lvalue with const qualified type 'struct S const'
END


BEGIN Integer may not be called
void f() {
    1();
}
EXPECT_MESSAGE
:2:6: error type 'int' is not a function or function pointer
END


REM ******** DereferenceExpr ********


BEGIN Constant expression may not dereference pointer
int size;
int x[1 + *(int*)0];
EXPECT_MESSAGE
:2:9: error not a constant expression
END


BEGIN Dereference global pointer
int* p;
int f() {
    return *p;
}
EXPECT_IR
@p = global ptr null

define i32 @f() {
  %1 = load ptr, ptr @p, align 8
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}
END


BEGIN Dereference operator yields an lvalue
int* p;
void f() {
    *p = 2;
}
EXPECT_IR
@p = global ptr null

define void @f() {
  %1 = load ptr, ptr @p, align 8
  store i32 2, ptr %1, align 4
  ret void
}
END


BEGIN Volatile store through dereference operator
volatile int* p;
void f() {
    *p = 2;
}
EXPECT_IR
@p = global ptr null

define void @f() {
  %1 = load ptr, ptr @p, align 8
  store volatile i32 2, ptr %1, align 4
  ret void
}
END


BEGIN Volatile load through dereference operator
volatile int* p;
int f() {
    return *p;
}
EXPECT_IR
@p = global ptr null

define i32 @f() {
  %1 = load ptr, ptr @p, align 8
  %2 = load volatile i32, ptr %1, align 4
  ret i32 %2
}
END


REM ******** EntityExpr ********


BEGIN Constant expression may not access non-const variable
int size;
int x[1 + size];
EXPECT_MESSAGE
:2:11: error variable 'size' is not a constant
:1:5: ... see declaration of variable 'size'
END


BEGIN Value of local variable
int f() {
    int x = 3;
    return x;
}
EXPECT_IR
define i32 @f() {
  %x = alloca i32, align 4
  store i32 3, ptr %x, align 4
  %1 = load i32, ptr %x, align 4
  ret i32 %1
}
END


BEGIN Value of enum
enum { RED, GREEN = 7, BLUE };
int f() {
    return GREEN;
}
EXPECT_IR
define i32 @f() {
  ret i32 7
}
END


REM ******** MemberExpr ********

BEGIN Load value of struct member variable
struct S { int x; int y; };
int f(S s) {
    return s.y;
}
EXPECT_IR
%S = type { i32, i32 }

define i32 @f(%S %0) {
  %s = alloca %S, align 8
  store %S %0, ptr %s, align 4
  %y = getelementptr inbounds %S, ptr %s, i32 0, i32 1
  %2 = load i32, ptr %y, align 4
  ret i32 %2
}
END


BEGIN Load value of struct member variable through pointer (2)
struct S { int x; int y; };
int f(S* s) {
    return s->y;
}
EXPECT_IR
%S = type { i32, i32 }

define i32 @f(ptr %0) {
  %s = alloca ptr, align 8
  store ptr %0, ptr %s, align 8
  %2 = load ptr, ptr %s, align 8
  %y = getelementptr inbounds %S, ptr %2, i32 0, i32 1
  %3 = load i32, ptr %y, align 4
  ret i32 %3
}
END


BEGIN Store value of struct member variable
struct S { int x; int y; };
void f(S* s) {
    s->y = 7;
}
EXPECT_IR
%S = type { i32, i32 }

define void @f(ptr %0) {
  %s = alloca ptr, align 8
  store ptr %0, ptr %s, align 8
  %2 = load ptr, ptr %s, align 8
  %y = getelementptr inbounds %S, ptr %2, i32 0, i32 1
  store i32 7, ptr %y, align 4
  ret void
}
END


BEGIN Error on attempt to apply dot operator to pointer
struct S { int x; int y; };
int f(S* s) {
    return s.y;
}
EXPECT_MESSAGE
:3:13: error type 'struct S*' is a pointer; consider using the '->' operator instead of '.'
END


BEGIN Error on attempt to apply pointer operator to non-pointer
struct S { int x; int y; };
int f(S s) {
    return s->y;
}
EXPECT_MESSAGE
:3:13: error type 'struct S' is not a pointer; consider using the '.' operator instead of '->'
END


BEGIN Error on attempt to access non-existing member
struct S { int x; };
int f(S s) {
    return s.y;
}
EXPECT_MESSAGE
:3:13: error no member named 'y' in 'struct S'
:1:1: ... see 'struct S'
END


BEGIN Error on attempt to access member of inappropriate type
int f(int i) {
    return i.y;
}
EXPECT_MESSAGE
:2:12: error type 'int' does not have members
END


BEGIN Load value of union member variable
union U { int x; short s; };
int f(U u) {
    return u.x;
}
EXPECT_IR
%U = type { [0 x i16], [1 x i32] }

define i32 @f(%U %0) {
  %u = alloca %U, align 8
  store %U %0, ptr %u, align 4
  %x = getelementptr inbounds %U, ptr %u, i32 0, i32 1, i32 0
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Load value from anonymous union within struct
struct S {
    float f;
    union {
        int x;
        short s;
    };
};
int f(S s) {
    return s.x;
}
EXPECT_IR
%S = type { float, { [0 x i16], [1 x i32] } }

define i32 @f(%S %0) {
  %s = alloca %S, align 8
  store %S %0, ptr %s, align 4
  %x = getelementptr inbounds %S, ptr %s, i32 0, i32 1, i32 1, i32 0
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Load value through a bunch of anonymous structs and unions
struct S {
    struct {
        union {
            union {
                int x;
                short s;
            };
        };
    };
};
int f(S s) {
    return s.x;
}
EXPECT_IR
%S = type { { { [1 x { [0 x i16], [1 x i32] }] } } }

define i32 @f(%S %0) {
  %s = alloca %S, align 8
  store %S %0, ptr %s, align 4
  %x = getelementptr inbounds %S, ptr %s, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %2 = load i32, ptr %x, align 4
  ret i32 %2
}
END


REM ******** SequenceExpr ********

BEGIN Sequence operator in constant expression
int x = (1, 2);
EXPECT_IR
@x = global i32 2
END


BEGIN Sequence operator in non-constant expression
void f() {
    int x = (1, 2);
}
EXPECT_IR
define void @f() {
  %x = alloca i32, align 4
  store i32 2, ptr %x, align 4
  ret void
}
END


BEGIN Sequence operator with void result
void g();
void f() {
    g(), g();
}
EXPECT_IR
declare void @g()

define void @f() {
  call void @g()
  call void @g()
  ret void
}
END


REM ******** SubscriptExpr ********

BEGIN Subscript operator on pointer (1)
int f(int* p) {
    return p[1];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscript operator on pointer (2)
int f(int* p) {
    return 1[p];
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  %4 = load i32, ptr %3, align 4
  ret i32 %4
}
END


BEGIN Subscripted pointer is lvalue
int f(int* p) {
    p[1] = 2;
}
EXPECT_IR
define i32 @f(ptr %0) {
  %p = alloca ptr, align 8
  store ptr %0, ptr %p, align 8
  %2 = load ptr, ptr %p, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  store i32 2, ptr %3, align 4
  ret i32 0
}
END


BEGIN Subscript operator on array
int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END


BEGIN Subscripted array is lvalue
int a[10];
int f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  store i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 0
}
END


BEGIN Volatile store array element
volatile int a[10];
void f() {
    a[1] = 2;
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define void @f() {
  store volatile i32 2, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret void
}
END


BEGIN Volatile load array element
volatile int a[10];
int f() {
    return a[1];
}
EXPECT_IR
@a = global [10 x i32] zeroinitializer

define i32 @f() {
  %1 = load volatile i32, ptr getelementptr inbounds ([10 x i32], ptr @a, i64 0, i32 1), align 4
  ret i32 %1
}
END
