BEGIN Cannot assign to rvalue
void f(int x) {
    1 = 1;
}
EXPECT_MESSAGE
:2:7: error expression is not assignable
END


BEGIN Assignment yields an lvalue (1)
void f(int&) {
}
void g() {
    int x;
    f(x = 1);
}
EXPECT_IR
define void @f(ptr %0) {
  ret void
}

define void @g() {
  %x = alloca i32, align 4
  store i32 1, ptr %x, align 4
  call void @f(ptr %x)
  ret void
}
END


BEGIN Assignment yields an lvalue (2)
void f(int&) {
}
void g() {
    int x;
    f(x += 1);
}
EXPECT_IR
define void @f(ptr %0) {
  ret void
}

define void @g() {
  %x = alloca i32, align 4
  %1 = load i32, ptr %x, align 4
  %2 = add i32 %1, 1
  store i32 %2, ptr %x, align 4
  call void @f(ptr %x)
  ret void
}
END


BEGIN Preincrement yields an lvalue (1)
void f(int&) {
}
void g() {
    int x;
    f(++x);
}
EXPECT_IR
define void @f(ptr %0) {
  ret void
}

define void @g() {
  %x = alloca i32, align 4
  %1 = load i32, ptr %x, align 4
  %2 = add i32 %1, 1
  store i32 %2, ptr %x, align 4
  call void @f(ptr %x)
  ret void
}
END


REM ******** Integer ********

BEGIN Assign integer parameter value
void f(int x) {
    x = 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  store i32 1, ptr %x, align 4
  ret void
}
END


BEGIN += integer parameter value
void f(int x) {
    x += 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret void
}
END


BEGIN -= integer parameter value
void f(int x) {
    x -= 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret void
}
END


BEGIN *= integer parameter value
void f(int x) {
    x *= 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = mul i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret void
}
END


BEGIN /= integer signed parameter value
void f(int x) {
    x /= 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sdiv i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret void
}
END


BEGIN /= integer unsigned parameter value
void f(unsigned x) {
    x /= 1;
}
EXPECT_IR
define void @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = udiv i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret void
}
END


BEGIN Pre-increment integer
int f(int x) {
    return ++x;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  store i32 %3, ptr %x, align 4
  %4 = load i32, ptr %x, align 4
  ret i32 %4
}
END


BEGIN Post-increment integer
int f(int x) {
    return x++;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = add i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret i32 %2
}
END


BEGIN Pre-decrement integer
int f(int x) {
    return --x;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  store i32 %3, ptr %x, align 4
  %4 = load i32, ptr %x, align 4
  ret i32 %4
}
END


BEGIN Post-decrement integer
int f(int x) {
    return x--;
}
EXPECT_IR
define i32 @f(i32 %0) {
  %x = alloca i32, align 4
  store i32 %0, ptr %x, align 4
  %2 = load i32, ptr %x, align 4
  %3 = sub i32 %2, 1
  store i32 %3, ptr %x, align 4
  ret i32 %2
}
END


REM ******** Floating point ********

BEGIN Assign floating point parameter value
void f(float x) {
    x = 1;
}
EXPECT_IR
define void @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  store float 1.000000e+00, ptr %x, align 4
  ret void
}
END


BEGIN += floating point parameter value
void f(float x) {
    x += 1;
}
EXPECT_IR
define void @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fadd float %2, 1.000000e+00
  store float %3, ptr %x, align 4
  ret void
}
END


BEGIN -= floating point parameter value
void f(float x) {
    x -= 1;
}
EXPECT_IR
define void @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fsub float %2, 1.000000e+00
  store float %3, ptr %x, align 4
  ret void
}
END


BEGIN *= floating point parameter value
void f(float x) {
    x *= 1;
}
EXPECT_IR
define void @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fmul float %2, 1.000000e+00
  store float %3, ptr %x, align 4
  ret void
}
END


BEGIN /= floating point parameter value
void f(float x) {
    x /= 1;
}
EXPECT_IR
define void @f(float %0) {
  %x = alloca float, align 4
  store float %0, ptr %x, align 4
  %2 = load float, ptr %x, align 4
  %3 = fdiv float %2, 1.000000e+00
  store float %3, ptr %x, align 4
  ret void
}
END


REM ******** Other ********


BEGIN += pointer parameter value
void f(int* x) {
    x += 1;
}
EXPECT_IR
define void @f(ptr %0) {
  %x = alloca ptr, align 8
  store ptr %0, ptr %x, align 8
  %2 = load ptr, ptr %x, align 8
  %3 = getelementptr i32, ptr %2, i32 1
  store ptr %3, ptr %x, align 8
  ret void
}
END


BEGIN = struct value
struct S {
    int x;
};
void f(S s) {
    s = s;
}
EXPECT_IR
%S = type { i32 }

define void @f(%S %0) {
  %s = alloca %S, align 8
  store %S %0, ptr %s, align 4
  %2 = load %S, ptr %s, align 4
  store %S %2, ptr %s, align 4
  ret void
}
END


BEGIN Cannot assign struct lvalue with destructor to itself
struct S {
    int x;
    void destructor(S&) {}
};
void f(S s) {
    s = s;
}
EXPECT_MESSAGE
:6:9: error lvalue with destructor is not copyable; consider '&&' prefix move operator
END


BEGIN Calls destructor on struct before assigning it a new value
struct S {
    int x;
    void destructor(S&) {}
};
void f() {
    S s;
    s = &&s;
}
EXPECT_IR
%S = type { i32 }

@indeterminate = external global i1

define void @f() {
  %s = alloca %S, align 8
  store %S zeroinitializer, ptr %s, align 4
  %1 = load %S, ptr %s, align 4
  store %S zeroinitializer, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  store %S %1, ptr %s, align 4
  call void @destructor_wrapper(ptr %s)
  ret void
}

define void @destructor(ptr %0) {
  ret void
}

define internal void @destructor_wrapper(ptr %0) {
  %2 = load %S, ptr %0, align 4
  %3 = load i1, ptr @indeterminate, align 1
  %4 = select i1 %3, %S %2, %S zeroinitializer
  %5 = call i1 @llvm.is.constant.s_Ss(%S %4)
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  call void @destructor(ptr %0)
  br label %7

7:                                                ; preds = %6, %1
  ret void
}

; Function Attrs: convergent nocallback nofree nosync nounwind readnone willreturn
declare i1 @llvm.is.constant.s_Ss(%S) #0

attributes #0 = { convergent nocallback nofree nosync nounwind readnone willreturn }
END
