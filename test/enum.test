BEGIN Untagged enum definition (preparse)
enum { A=1, B } z;
PREPARSE
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 1], ["ec", "B"]]], "z"]]


BEGIN Untagged enum definition
enum { A=1, B } z;
DECLARATIONS
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 1], ["ec", "B", 2]]], "z"]]


BEGIN Tagged enum definition (preparse)
enum E { A=1, B } z;
PREPARSE
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 1], ["ec", "B"]]], "z"]]
EXPECT_GLOBALS
[["ec","A",1]
,["ec","B"]
,["typedef",["ENUM",[["ec","A",1],["ec","B"]]],"E"]
,["var","ES",["ENUM",[["ec","A",1],["ec","B"]]],"z"]]


BEGIN Tagged enum definition
enum E { A=1, B } z;
DECLARATIONS
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 1], ["ec", "B", 2]]], "z"]]
EXPECT_GLOBALS
[["ec","A",1]
,["ec","B",2]
,["typedef",["ENUM",[["ec","A",1],["ec","B",2]]],"E"]
,["var","ES",["ENUM",[["ec","A",1],["ec","B",2]]],"z"]]


BEGIN Tagged incomplete enum
enum E z;
EXPECT_AST
[["var","ES",["ENUM",["?"]],"z"]]
EXPECT_GLOBALS
[["typedef",["ENUM",["?"]],"E"],
["var","ES",["ENUM",["?"]],"z"]]


BEGIN Enum constant names must be distinct
enum E { A, A };
DECLARATIONS
EXPECT_MESSAGE
:1:13: error redefinition of enum constant 'A'...
:1:10: ...see other
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0],["ec","A"]]],"E"]]


BEGIN #enum directive
#enum A
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",0]]


BEGIN Tagged union with multiple compatible definitions
enum E { A, B };
enum E { A, B };
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Order of members does not matter for compatible enums
enum E { B=2, A=1 };
enum E { A=1, B=2 };
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",1]
,["ec","B",2]
,["typedef",["ENUM",[["ec","B",2], ["ec","A",1]]],"E"]]


BEGIN Complete enum must contain all members of compatible enum
enum E { A };
enum E { B };
DECLARATIONS
EXPECT_MESSAGE
:2:10: error enum constant 'B'...
:1:1: ...missing from other definition
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"]]


BEGIN Complete enum compatible with incomplete enum (1)
enum E;
enum E { A, B };
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Complete enum compatible with incomplete enum (2)
enum E { A, B };
enum E;
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Different enums may not contain the same constants (1)
enum { A, B } a;
enum { A, C } b;
DECLARATIONS
EXPECT_MESSAGE
:2:8: error redefinition of enum constant 'A'...
:1:8: ...see other
END


BEGIN Different enums may not contain the same constants (2)
enum E1 { A, B };
enum E2 { A, C };
DECLARATIONS
EXPECT_MESSAGE
:2:11: error redefinition of enum constant 'A'...
:1:11: ...see other
END


BEGIN Enum constant folding
enum E { A = 1+1 };
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",2],["typedef",["ENUM",[["ec","A",2]]],"E"]]


BEGIN Enum constant may refer to prior constants
enum E { A = 1, B = A };
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",1],["ec","B",1],["typedef",["ENUM",[["ec","A",1],["ec","B",1]]],"E"]]


BEGIN Enum constant may refer to following constants
enum E { B = A, A = 1 };
DECLARATIONS
EXPECT_MESSAGE
:1:14: error 'A' undeclared
EXPECT_GLOBALS
[["ec","A",1],["ec","B",0],["typedef",["ENUM",[["ec","B",0],["ec","A",1]]],"E"]]


BEGIN Compatible enum definitions must have same constant values
enum E { A = 1 };
enum E { A = 2 };
DECLARATIONS
EXPECT_MESSAGE
:2:10: error incompatible enum constant 'A' value 2...
:1:10: ...versus 1 here
EXPECT_GLOBALS
[["ec","A",1],["typedef",["ENUM",[["ec","A",1]]],"E"]]


BEGIN Size of incomplete enum
enum E;
char a[sizeof(E)];
DECLARATIONS
EXPECT_MESSAGE
:2:8: error sizeof applied to incomplete type
END


BEGIN Size of complete enum
enum E { A };
char a[sizeof(E)];
DECLARATIONS
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"]
,["var","ES",["A","C",4],"a"]]


BEGIN Enum is incomplete within its definition
enum E { A = sizeof(E) };
DECLARATIONS
EXPECT_MESSAGE
:1:14: error sizeof applied to incomplete type
END
