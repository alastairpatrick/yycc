BEGIN Parses expression statement
7;
EXPECT_AST
7


BEGIN Parses compound statement
{7; 8;}
PARSE
EXPECT_AST
["block", [7, 8]]


BEGIN Preparse skips content of compound statement
{7; 8;}
PREPARSE
EXPECT_AST
["block", []]


BEGIN Parses empty for statement
for (;;) {}
EXPECT_AST
["for",null,null,null,null,["block",[]]]


BEGIN Parses for statement with initialize expression
for (1; 2; 3) {}
EXPECT_AST
["for",null,1,2,3,["block",[]]]


BEGIN Parses for statement with declaration
for (int i = 1; 2; 3) { i; }
PARSE
EXPECT_AST
["block",[
    ["for",["var","","Si","i",1],null,2,3,["block",["Ni"]]]
]]


BEGIN Parse if statement
if (1) 2;
EXPECT_AST
["if", 1, 2, null]


BEGIN Parse if-else statement
if (1) 2; else 3;
EXPECT_AST
["if", 1, 2, 3]


BEGIN Parse dangling else
if (1) if (2) 3; else 4;
EXPECT_AST
["if", 1, ["if", 2, 3, 4], null]


BEGIN Parses void return statement
return;
EXPECT_AST
["return"]


BEGIN Parses return statement
return 7;
EXPECT_AST
["return", 7]



BEGIN Parses identifier labelled statement
a: b:
    return 7;
EXPECT_AST
[["label", "b"], ["label", "a"], "return", 7]


BEGIN Parses case labelled statement
case 3:
    return 7;
EXPECT_AST
[["case", 3], "return", 7]


BEGIN Parses default labelled statement
default:
    return 7;
EXPECT_AST
[["default"], "return", 7]


BEGIN Goto statement
goto label;
EXPECT_AST
["goto", "label"]


BEGIN Switch statement
switch (1) {}
EXPECT_AST
["switch",1,["block",[]]]


