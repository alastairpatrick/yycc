BEGIN Looks up identifiers in declaration type
#include "a.h"
T x;
FILE "a.h"
typedef int T;
EXPECT_TEXT
#type T
#var x
#line 1 "a.h"
typedef int T;
#line 2 ""
T x;
END


BEGIN Looks up identifiers in array declarator
#include "a.h"
int x;
FILE "a.h"
extern int x;
EXPECT_TEXT
#var x
#line 1 "a.h"
extern int x;
#line 2 ""
int x;
END


BEGIN Looks up identifiers in array declarator size expression
#include "a.h"
int x[y];
FILE "a.h"
const int y = 2;  // TODO: replace this with a avalid constant integer expression
EXPECT_TEXT
#var x y
#line 1 "a.h"
const int y = 2;
#line 2 ""
int x[y];
END


BEGIN Looks up identifiers in function prototype
#include "a.h"
int foo(T x);
FILE "a.h"
typedef int T;
EXPECT_TEXT
#func foo
#type T
#line 1 "a.h"
typedef int T;
#line 2 ""
int foo(T x);
END


BEGIN Looks up identifiers in function definition body
#include "a.h"
int foo(void) {
    T x;
}
FILE "a.h"
typedef int T;
EXPECT_TEXT
#func foo
#type T
#line 1 "a.h"
typedef int T;
#line 2 ""
int foo(void) {
    T x;
}
END


BEGIN Keeps marked struct
#include "a.h"
int foo(void) {
    S x;
}
FILE "a.h"
struct S {
    int x;
};
EXPECT_TEXT
#func foo
#type S
#line 1 "a.h"
struct S {
#var x
#line 2 5
int x;
};
#line 2 ""
int foo(void) {
    S x;
}
END


BEGIN Keeps enum marked via constant
#include "a.h"
int foo(void) {
    return GREEN;
}
FILE "a.h"
enum Color { RED, GREEN, BLUE };
EXPECT_TEXT
#enum BLUE GREEN RED
#func foo
#type Color
#line 1 "a.h"
enum Color { RED, GREEN, BLUE };
#line 2 ""
int foo(void) {
    return GREEN;
}
END


BEGIN Sweeps header file declarations that are not marked
#include "a.h"
int x;
FILE "a.h"
typedef int T;
EXPECT_TEXT
#var x
int x;
END


BEGIN Inserts declaration directives in struct definition
struct{int x;};
EXPECT_TEXT
struct{
#var x
#line 1 8
int x;};
END


BEGIN Inserts declaration directives in union definition
union{int x;};
EXPECT_TEXT
union{
#var x
#line 1 7
int x;};
END
