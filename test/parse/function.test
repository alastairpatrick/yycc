BEGIN Function prototype with no parameters (1)
int foo();
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Function prototype with no parameters (2)
int foo(void);
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Function prototype with multiple parameters
void foo(float x, float y);
EXPECT_AST
[["fun", "E", ["F", "V", "Ff", "Ff"], "foo"]]


BEGIN Error if prototype has second void parameter
int foo(float, void);
EXPECT_MESSAGE
:1:16: error a parameter may not have void type
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Error if prototype has multiple void parameters
int foo(void, void);
EXPECT_MESSAGE
:1:15: error a parameter may not have void type
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Error on parameter that parses as an expression
int foo(1+1, float y);
EXPECT_MESSAGE
:1:9: error expected parameter declaration
EXPECT_AST
[["fun","E",["F","Si","Ff"],"foo"]]


BEGIN Error on unexpected token in parameter
int foo(?, float y);
EXPECT_MESSAGE
:1:9: error expected parameter declaration
EXPECT_AST
[["fun","E",["F","Si","Ff"],"foo"]]


BEGIN Error missing comma between parameters
int foo(int a float b);
EXPECT_MESSAGE
:1:15: error expected ')' but got 'float'
EXPECT_AST
[["fun","E",["F","Si","Si"],"foo"]]


BEGIN Error on typedef parameter declaration
int foo(typedef int x, float y);
EXPECT_MESSAGE
:1:9: error invalid storage class
EXPECT_AST
[["fun","E",["F","Si","Si","Ff"],"foo"]]


BEGIN Error on function definition as parameter declaration
int foo(void x() {}, float y);
PARSE
EXPECT_MESSAGE
:1:18: error expected ')' but got '{'
EXPECT_GLOBALS
[["fun","E",["F","Si",["F","V"]],"foo"]]


BEGIN Error on initializer in parameter declaration
int foo(void x = 7, float y);
PARSE
EXPECT_MESSAGE
:1:16: error expected ')' but got '='
EXPECT_GLOBALS
[["fun","E",["F","Si"],"foo"]]


BEGIN Prototype and external linkage
extern int foo(float);
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Prototype and internal linkage
static int foo(float);
EXPECT_AST
[["fun", "I", ["F", "Si", "Ff"], "foo"]]


BEGIN Error if prototype has register storage class
register int foo(float);
EXPECT_MESSAGE
:1:14: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Error if function parameter has invalid storage class
int foo(extern float);
EXPECT_MESSAGE
:1:9: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Function parameter with (ignored) register storage class
void foo(register int);
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Function with pass-by-reference parameter (1)
void foo(int x&);
EXPECT_AST
[["fun","E",["F","V",["Bl","Si"]],"foo"]]


BEGIN Function with pass-by-reference parameter (2)
void foo(int (x)&);
EXPECT_AST
[["fun","E",["F","V",["Bl","Si"]],"foo"]]


BEGIN Pointer to pass-by-reference is invalid
void foo(int (*x)&);
EXPECT_MESSAGE
:1:18: error pass-by-reference '&' at invalid position
EXPECT_AST
[["fun","E",["F","V",["P","Si"]],"foo"]]


BEGIN Array of pass-by-reference parameter is invalid
void foo(int x[4]&);
EXPECT_MESSAGE
:1:18: error pass-by-reference '&' at invalid position
EXPECT_AST
[["fun","E",["F","V",["A","Si",4]],"foo"]]


BEGIN Function return type may not be pass-by-reference
void foo(int x)&;
EXPECT_MESSAGE
:1:16: error pass-by-reference '&' only valid on function parameters
EXPECT_AST
[["fun","E",["F","V","Si"],"foo"]]


BEGIN Function may not be pass-by-reference
void foo&(int x);
EXPECT_MESSAGE
:1:9: error pass-by-reference '&' only valid on function parameters
EXPECT_AST
[["fun","E",["F","V","Si"],"foo"]]


BEGIN Function with pass-by-rvalue-reference parameter (1)
void foo(int x&&);
EXPECT_AST
[["fun","E",["F","V",["Br","Si"]],"foo"]]


BEGIN Function with pass-by-rvalue-reference parameter (2)
void foo(int (x)&&);
EXPECT_AST
[["fun","E",["F","V",["Br","Si"]],"foo"]]


BEGIN Function definition with local variables
void foo() {
    int x = 1;
}
PARSE
EXPECT_AST
[["fun", "E", ["F", "V"], "foo", [], ["block", [
    ["var", "", "Si", "x", 1]
]]]]


BEGIN Function definition may not share external declaration with declarators (1)
int foo, bar(int x) {
}
EXPECT_MESSAGE
:1:21: error expected ';' but got '{'
EXPECT_AST
[[["var", "ES", "Si", "foo"]
 ,["fun", "E", ["F", "Si", "Si"], "bar"]]]


BEGIN Function definition may not share external declaration with declarators (2)
int bar(int x) {
}, foo;
PARSE
EXPECT_MESSAGE
:2:2: error unexpected token ','
EXPECT_AST
[
    ["fun", "E", ["F", "Si", "Si"], "bar", ["x"], ["block", []]]
]


BEGIN Parameters have function prototype scope (1)
int foo(int foo) {
}
EXPECT_GLOBALS
[["fun","E",["F","Si","Si"],"foo",["foo"],["block",[]]]]


BEGIN Parameters have function prototype scope (2)
int foo(int bar) {
    int bar;
}
PARSE
EXPECT_GLOBALS
[
    ["fun","E",["F","Si","Si"],"foo",["bar"],["block",[
        ["var","","Si","bar"]
    ]]]
]


BEGIN Cannot declare static function at block scope
void f(void) {
    static void foo(void);
}
PARSE
EXPECT_MESSAGE
:2:17: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "V"], "f", [""], ["block", [["fun", "", ["F", "V"], "foo"]]]]]


BEGIN Inline function with internal linkage
static inline void foo() {
}
EXPECT_AST
[["fun", "I", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Inline definition
inline void foo() {
}
EXPECT_AST
[["fun", "Ei", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Inline specifier may be given multiple times
inline void inline foo() {
}
EXPECT_AST
[["fun", "Ei", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Parameters may not be inline
void foo(inline int x);
EXPECT_MESSAGE
:1:21: error 'inline' may only appear on function
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Function definition with return statement
int main(int argc, const char* argv) {
    return argc;
}
PARSE
EXPECT_AST
[["fun", "E", ["F", "Si", "Si", ["P", ["Qc", "C"]]], "main", ["argc", "argv"], ["block", [
    ["return", "Nargc"]
]]]]


BEGIN Function declaration with nested declarators
int (*fpfi(int (*)(long), int))(int, float);
EXPECT_AST
[["fun","E",["F",["P",["F","Si","Si","Ff"]],["P",["F","Si","Sl"]],"Si"],"fpfi"]]


BEGIN Multiple function declarations
int foo(signed);
signed foo(int);
EXPECT_AST
[["fun", "E", ["F", "Si", "Si"], "foo"]
,["fun", "E", ["F", "Si", "Si"], "foo"]]


BEGIN Multiple function declarations with extern storage class
extern void foo(int);
extern void foo(int);
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]
,["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Function declaration having internal linkage may follow function declaration having external linkage
extern void foo(int);
static void foo(int);
EXPECT_AST
[["fun","E",["F","V","Si"],"foo"]
,["fun","I",["F","V","Si"],"foo"]]


BEGIN Empty function definition
void foo(int) {
}
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo", [""], ["block", []]]]


BEGIN Function initially declared with a function-typed typedef
typedef void F(int x);
F foo;
void foo(int x) {
}
PREPARSE
EXPECT_AST
[["typedef",["F","V","Si"],"F"]
,["var","ES","NF","foo"]
,["fun","E",["F","V","Si"],"foo",["x"],["block",[]]]]


BEGIN Function declared with a function-typed typedef in another translation unit (1)
F foo;  // F typedef in another translation unit
void foo(int x) {
}
PREPARSE
EXPECT_AST
[["var","ES","NF","foo"]
,["fun","E",["F","V","Si"],"foo",["x"],["block",[]]]]


BEGIN Function declared with a function-typed typedef in another translation unit (2)
void foo(int x) {
}
F foo;  // F typedef in another translation unit
PREPARSE
EXPECT_AST
[["fun","E",["F","V","Si"],"foo",["x"],["block",[]]]
,["var","ES","NF","foo"]]



BEGIN #func directive
#func f
void f();
PARSE
EXPECT_GLOBALS
[["fun","E",["F","V"],"f"]]


BEGIN Statement may not occur at file scope
return;
EXPECT_MESSAGE
:1:1: error expected declaration; statements may occur at block scope but not file scope
END
