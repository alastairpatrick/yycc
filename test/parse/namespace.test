BEGIN Outside namespace, unqualified identifier declaration
int a;
EXPECT_AST
[["var","ES","Si","a"]]


BEGIN Outside namespace, :: prefixed identifier declaration
int ::a;
EXPECT_AST
[["var","ES","Si","a"]]


BEGIN Outside namespace, qualified identifier declaration
int a::b::c;
EXPECT_AST
[["var","ES","Si","a::b::c"]]


BEGIN Outside namespace, :: prefixed and qualified identifier declaration
int ::a::b::c;
EXPECT_AST
[["var","ES","Si","a::b::c"]]


BEGIN In namespace, :: prefixed identifier declaration is always relative to root namespace (1)
#namespace X::Y
int ::a;
EXPECT_AST
[["var","ES","Si","a"]]


BEGIN In namespace, :: prefixed identifier declaration is always relative to root namespace (2)
#namespace X::Y
int ::X::a;
EXPECT_AST
[["var","ES","Si","X::a"]]


BEGIN In namespace, :: prefixed identifier declaration is always relative to root namespace (3)
#namespace X::Y
int ::Y::a;
EXPECT_AST
[["var","ES","Si","Y::a"]]



BEGIN In namespace, unqualified identifier declaration is always appended to namespace (1)
#namespace X::Y
int a;
EXPECT_AST
[["var","ES","Si","X::Y::a"]]


BEGIN In namespace, unqualified identifier declaration is always appended to namespace (2)
#namespace X::Y
int X;
EXPECT_AST
[["var","ES","Si","X::Y::X"]]


BEGIN In namespace, unqualified identifier declaration is always appended to namespace (3)
#namespace X::Y
int Y;
EXPECT_AST
[["var","ES","Si","X::Y::Y"]]


BEGIN In namespace, qualified identifier declaration with no leading :: is appended to namespace (1)
#namespace X::Y
int Z::a;
EXPECT_AST
[["var","ES","Si","X::Y::Z::a"]]


BEGIN In namespace, qualified declaration with no leading :: is appended to namespace (2)
#namespace X::Y
int X::a;
EXPECT_AST
[["var","ES","Si","X::Y::X::a"]]


BEGIN In namespace, qualified identifier declaration with no leading :: is appended to namespace (3)
#namespace X::Y
int Y::a;
EXPECT_AST
[["var","ES","Si","X::Y::Y::a"]]


BEGIN Reset namespace
#namespace X::Y
#namespace
int a;
EXPECT_AST
[["var","ES","Si","a"]]


BEGIN Namespace directive may have redundant :: prefix
#namespace ::X::Y
int a;
EXPECT_AST
[["var","ES","Si","X::Y::a"]]


BEGIN Error if namespace token is not identifier
#namespace 7
EXPECT_MESSAGE
:1:12: error unexpected '7' token in directive
END


BEGIN Outside namespace, unqualified identifier usage
int a;
int *b = &a;
PARSE
EXPECT_AST
[["var","ES","Si","a"],["var","ES",["P","Si"],"b",["address","Na"]]]


BEGIN Outside namespace, :: prefixed identifier usage
int a;
int *b = &::a;
PARSE
EXPECT_AST
[["var","ES","Si","a"],["var","ES",["P","Si"],"b",["address","Na"]]]


BEGIN Outside namespace, qualified identifier usage
int X::a;
int *b = &X::a;
PARSE
EXPECT_AST
[["var","ES","Si","X::a"],["var","ES",["P","Si"],"b",["address","NX::a"]]]


BEGIN Outside namespace, :: prefixed and qualified identifier usage
int X::a;
int *b = &::X::a;
PARSE
EXPECT_AST
[["var","ES","Si","X::a"],["var","ES",["P","Si"],"b",["address","NX::a"]]]


BEGIN In namespace, unqualified identifier usage
#namespace X::Y
int a;
int* b = &a;
PARSE
EXPECT_AST
[["var","ES","Si","X::Y::a"],["var","ES",["P","Si"],"X::Y::b",["address","NX::Y::a"]]]


BEGIN In namespace, :: prefixed identifier usage
int a;
#namespace X::Y
int* b = &::a;
PARSE
EXPECT_AST
[["var","ES","Si","a"],["var","ES",["P","Si"],"X::Y::b",["address","Na"]]]


BEGIN In namespace, :: qualified identifier usage
#namespace X::Y
int a;
#namespace X
int* b = &Y::a;
PARSE
EXPECT_AST
[["var","ES","Si","X::Y::a"],["var","ES",["P","Si"],"X::b",["address","NX::Y::a"]]]


BEGIN In namespace, error on :: qualified identifier usage (1)
#namespace X::Y
int a;
int* b = &X::Y::a;
PARSE
EXPECT_MESSAGE
:3:11: error identifier 'X::Y::a' (aka 'X::Y::X::Y::a') undeclared
END


BEGIN In namespace, error on :: qualified identifier usage (2)
#namespace X::Y
int a;
int* b = &Y::a;
PARSE
EXPECT_MESSAGE
:3:11: error identifier 'Y::a' (aka 'X::Y::Y::a') undeclared
END

BEGIN In namespace, :: prefixed and qualified identifier usage
#namespace X::Y
int a;
int* b = &::X::Y::a;
PARSE
EXPECT_AST
[["var","ES","Si","X::Y::a"],["var","ES",["P","Si"],"X::Y::b",["address","NX::Y::a"]]]


BEGIN Substitute unqualified identifier according to using directive (1)
#using std::sort
int std::sort;
int x = sort;
PARSE
EXPECT_AST
[["var","ES","Si","std::sort"],["var","ES","Si","x","Nstd::sort"]]


BEGIN Substitute unqualified identifier according to using directive (2)
#using ::std::sort
int std::sort;
int x = sort;
PARSE
EXPECT_AST
[["var","ES","Si","std::sort"],["var","ES","Si","x","Nstd::sort"]]


BEGIN Substitute unqualified identifier according to using directive (3)
#using std::exp::sort
int std::exp::sort;
int x = sort;
PARSE
EXPECT_AST
[["var","ES","Si","std::exp::sort"],["var","ES","Si","x","Nstd::exp::sort"]]


BEGIN Substitute unqualified identifier according to using equals directive
#using std_sort = std::exp::sort
int std::exp::sort;
int x = std_sort;
PARSE
EXPECT_AST
[["var","ES","Si","std::exp::sort"],["var","ES","Si","x","Nstd::exp::sort"]]


BEGIN First token of using missing
#using
EXPECT_MESSAGE
:1:7: error expected identifier
END


BEGIN First token of using directive not an identifier
#using 7
EXPECT_MESSAGE
:1:8: error unexpected '7' token in directive
END


BEGIN Unexpected punctuator instead of equals in using directive
#using std_sort : std::exp::sort
EXPECT_MESSAGE
:1:17: error unexpected ':' token in directive
END


BEGIN Third token of using directive not an identifier
#using sort = 7
EXPECT_MESSAGE
:1:15: error unexpected '7' token in directive
END



BEGIN Using directive parameter is itself evaluated as an identifier
#using sort = std::sort
#using sort2 = sort
int std::sort;
int x = sort2;
PARSE
EXPECT_AST
[["var","ES","Si","std::sort"],["var","ES","Si","x","Nstd::sort"]]



BEGIN Namespace affects identifiers declared at block scope
#namespace X::Y::Z
void f() {
    int X::Y::Z::x;
}
PARSE
EXPECT_AST
[["fun","E",["F","V"],"X::Y::Z::f",[],["block",[["var","","Si","X::Y::Z::x"]]]]]


BEGIN Namespace affects struct members
#namespace X::Y::Z
struct S {
    int X::Y::Z::x;
} z;
EXPECT_AST
[["var","ES",["STRUCT",[["X::Y::Z::x","Si"]]],"X::Y::Z::z"]]


BEGIN Namespace affects enum constants
#namespace X::Y::Z
enum E {
    A,
} z;
EXPECT_AST
[["var","ES",["ENUM",[["ec","X::Y::Z::A"]]],"X::Y::Z::z"]]


BEGIN Can alias keywords with using directive
#using my_int = int
my_int x;
EXPECT_AST
[["var","ES","Si","x"]]


BEGIN Can alias keywords with using directive within namespace
#namespace X::Y::Z
#using my_int = int
my_int x;
EXPECT_AST
[["var","ES","Si","X::Y::Z::x"]]


BEGIN Error on undefined identifier reports file scope identifier rather than lexer text (1)
#using A = foo
A x;
PARSE
EXPECT_MESSAGE
:2:1: error type 'A' (aka 'foo') undefined
END


BEGIN Error on undefined identifier reports file scope identifier rather than lexer text (2)
#using A = foo
void f() {
    A;
}
PARSE
EXPECT_MESSAGE
:3:5: error identifier 'A' (aka 'foo') undeclared
END


BEGIN Enum constants may have qualified identifiers
enum E {
    E::A,
    E::B,
} z;
EXPECT_AST
[["var","ES",["ENUM",[["ec","E::A"],["ec","E::B"]]],"z"]]


BEGIN Unqualified identifier of nested structure added to enclosing file scope (1)
struct S {
    struct T {};
};
T x;
PARSE
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["STRUCT",[]]]]],"S"]
,["typedef",["STRUCT",[]],"T"],["var","ES",["STRUCT",[]],"x"]]


BEGIN Unqualified identifier of nested structure added to enclosing file scope (2)
struct S {
    struct T {
        struct U {
        };
    };
    U y;
};
END


BEGIN Unqualified identifier of nested structure added to enclosing file scope within namespace
#namespace X::Y
struct S {
    struct T {};
};
T z;
END


BEGIN Qualified identifier of member function added to enclosing file scope within namespace
#namespace X::Y
struct S {
    void f() {}
};
void g() {
    S::f();
}
END


BEGIN Unqualified identifier of nested structure added to enclosing block scope
void f() {
    struct S {
        struct T {};
    };
    T x;
}
PARSE
EXPECT_AST
[["fun","E",["F","V"],"f",[],["block",[
    []
   ,["var","",["STRUCT",[]],"x"]
]]]]


BEGIN Unqualified identifier of nested enum added to enclosing block scope
void f() {
    struct S {
        enum E { A };
    };
    E x = A;
}
PARSE
EXPECT_AST
[["fun","E",["F","V"],"f",[],["block",[
    [],
    ["var","",["ENUM",[["ec","A"]]],"x","NA"]
]]]]


BEGIN Qualified identifier of member function added to enclosing scope
struct S {
    void f() {}
};
PARSE
EXPECT_GLOBALS
[["typedef",["STRUCT",[["f",["F","V"]]]],"S"],["fun","",["F","V"],"S::f",[],["block",[]]]]


BEGIN Bind to member function through intemediate scope
struct S {
    struct T {
        void f() {}
    };

    void g() {
        T::f();
    }
};
PARSE
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["STRUCT",[["f",["F","V"]]]]],["g",["F","V"]]]],"S"],["fun","",["F","V"],"S::T::f",[],["block",[]]],["fun","",["F","V"],"S::g",[],["block",[["call","NT::f"]]]],["typedef",["STRUCT",[["f",["F","V"]]]],"T"]]
