BEGIN Variable
x
EXPECT_MESSAGE
:1:1: error 'x' undeclared
EXPECT_AST
0


BEGIN Condition expression
1 ? 2 : 3
EXPECT_AST
["?:", 1, 2, 3]


BEGIN Nested conditions
1 ? 2 ? 3 : 4 : 5 ? 6 : 7
EXPECT_AST
["?:", 1
       , ["?:", 2, 3, 4]
       , ["?:", 5, 6, 7]]


BEGIN Condition with logical OR
1 || 2 ? 3 || 4 : 5 ? 6 : 7
EXPECT_AST
["?:", ["||", 1, 2]
       , ["||", 3, 4]
       , ["?:", 5, 6, 7]]


BEGIN Condition with parentheses
1 ? (2+3) : (4+5)
EXPECT_AST
["?:",1,["+",2,3],["+",4,5]]


BEGIN Logical OR expression
1 || 2
EXPECT_AST
["||", 1, 2]


BEGIN Logical OR left associative
1 || 2 || 3
EXPECT_AST
["||", ["||", 1, 2], 3]


BEGIN Logical AND expression
1 && 2
EXPECT_AST
["&&", 1, 2]


BEGIN Logical AND left associative
1 && 2 && 3
EXPECT_AST
["&&", ["&&", 1, 2], 3]


BEGIN Logical AND higher precedence than logical OR
1 || 2 && 3
EXPECT_AST
["||", 1, ["&&", 2, 3]]


BEGIN Add expression
1 + 2
EXPECT_AST
["+", 1, 2]


BEGIN Add left associative
1 + 2 + 3
EXPECT_AST
["+", ["+", 1, 2]
    , 3]


BEGIN Subtract expression
1 - 2
EXPECT_AST
["-", 1, 2]


BEGIN Subtract left associative
1 - 2 - 3
EXPECT_AST
["-", ["-", 1, 2]
    , 3]


BEGIN Multiply expression
1 * 2
EXPECT_AST
["*", 1, 2]


BEGIN Multiply left associative
1 * 2 * 3
EXPECT_AST
["*", ["*", 1, 2]
    , 3]


BEGIN Multiply > additive precedence
1 + 2 * 3
EXPECT_AST
["+", 1
    , ["*", 2, 3]]


BEGIN Divide expression
1 / 2
EXPECT_AST
["/", 1, 2]


BEGIN Divide left associative
1 / 2 / 3
EXPECT_AST
["/", ["/", 1, 2]
      , 3]


BEGIN Divide > additive precedence
1 + 2 / 3
EXPECT_AST
["+", 1
      , ["/", 2, 3]]


BEGIN Modulo expression
1 % 2
EXPECT_AST
["%", 1, 2]


BEGIN Modulo left associative
1 % 2 % 3
EXPECT_AST
["%", ["%", 1, 2]
      , 3]


BEGIN Modulo > additive precedence
1 + 2 % 3
EXPECT_AST
["+", 1
      , ["%", 2, 3]]


BEGIN Assignment expression
1 = 2
EXPECT_AST
["=", 1, 2]


BEGIN Assignment right associative
1 = 2 = 3
EXPECT_AST
["=", 1, ["=", 2, 3]]


BEGIN Multiply assignment expression
1 *= 2
EXPECT_AST
["*=", 1, 2]


BEGIN Divide assignment expression
1 /= 2
EXPECT_AST
["/=", 1, 2]


BEGIN Modulo assignment expression
1 %= 2
EXPECT_AST
["%=", 1, 2]


BEGIN Add assignment expression
1 += 2
EXPECT_AST
["+=", 1, 2]


BEGIN Subtract assignment expression
1 -= 2
EXPECT_AST
["-=", 1, 2]


BEGIN Left shift assignment expression
1 <<= 2
EXPECT_AST
["<<=", 1, 2]


BEGIN Right shift assignment expression
1 >>= 2
EXPECT_AST
[">>=", 1, 2]


BEGIN And assignment expression
1 &= 2
EXPECT_AST
["&=", 1, 2]


BEGIN Or assignment expression
1 |= 2
EXPECT_AST
["|=", 1, 2]


BEGIN Exclusive or assignment expression
1 ^= 2
EXPECT_AST
["^=", 1, 2]


BEGIN Parentheses
1 + ( 2 + 3 )
EXPECT_AST
["+", 1
      , ["+", 2, 3]]


BEGIN Error on EOF mid expression
1 +
EXPECT_MESSAGE
:2:1: error unexpected end of file
EXPECT_AST
["+", 1, 0]


BEGIN Cast expression
(int*) 0
EXPECT_AST
["cast",["P","Si"],0]


BEGIN Subscript expression
1[2]
EXPECT_AST
["subs", 1, 2]


BEGIN Subscript expression is left associative
1[2][3]
EXPECT_AST
["subs", ["subs", 1, 2], 3]


BEGIN Sizeof int type
sizeof(int)
EXPECT_AST
["sizeof", "Si"]


BEGIN Sizeof complex type
sizeof(int * const)
EXPECT_AST
["sizeof",["Qc",["P","Si"]]]


BEGIN Sizeof type name may not declare identifier
sizeof(int x)
EXPECT_MESSAGE
:1:12: error expected ')' but got 'x'
EXPECT_AST
["sizeof","Si"]


BEGIN Sizeof type name may not be initialized
sizeof(int = 1)
EXPECT_MESSAGE
:1:12: error expected ')' but got '='
EXPECT_AST
["sizeof","Si"]


BEGIN Sizeof double value in parentheses
sizeof(1.0)
EXPECT_AST
["sizeof",["typeof",["Fd",1]]]


BEGIN Sizeof double value
sizeof 1.0
EXPECT_AST
["sizeof",["typeof",["Fd",1]]]
