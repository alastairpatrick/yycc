BEGIN Function prototype with no parameters (1)
int foo();
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Function prototype with no parameters (2)
int foo(void);
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Function prototype with multiple parameters
void foo(float x, float y);
EXPECT_AST
[["fun", "E", ["F", "V", "Ff", "Ff"], "foo"]]


BEGIN Error if prototype has multiple void parameters (1)
int foo(void, void);
EXPECT_MESSAGE
:1:15: error a parameter may not have void type
EXPECT_AST
[["fun", "E", ["F", "Si"], "foo"]]


BEGIN Error if prototype has multiple void parameters (2)
int foo(float, void);
EXPECT_MESSAGE
:1:16: error a parameter may not have void type
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Function parameters of function type are adjusted to pointer
int foo(int bar(void));
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", ["F", "Si"]]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (1)
int foo(int x[]);
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", "Si"]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (2)
int foo(int x[2]);
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", "Si"]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (3)
int foo(int x[2][3]);
EXPECT_AST
[["fun","E",["F","Si",["P",["A","Si",3]]],"foo"]]


BEGIN Qualified array type parameter
int foo(int x[const volatile restrict 1]);
EXPECT_AST
[["fun","E",["F","Si",["Qcrv",["P","Si"]]],"foo"]]


BEGIN Error on qualified array type parameter that is not outer-most
int foo(int x[2][const volatile restrict 3]);
DECLARATIONS
EXPECT_MESSAGE
:1:18: error unexpected token 'const'
EXPECT_AST
[["fun","E",["F","Si",["P",["A","Si",3]]],"foo"]]


BEGIN Static array type parameter
int foo(int x[static 1]);
EXPECT_AST
[["fun","E",["F","Si",["P","Si"]],"foo"]]


BEGIN Prototype and external linkage
extern int foo(float);
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Prototype and internal linkage
static int foo(float);
EXPECT_AST
[["fun", "I", ["F", "Si", "Ff"], "foo"]]


BEGIN Error if prototype has register storage class
register int foo(float);
EXPECT_MESSAGE
:1:1: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Error if function parameter has invalid storage class
int foo(extern float);
EXPECT_MESSAGE
:1:9: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "Si", "Ff"], "foo"]]


BEGIN Function parameter with (ignored) register storage class
void foo(register int);
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Function definition with local variables
void foo() {
    int x = 1;
}
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "V"], "foo", [], ["block", [
    ["var", "", "Si", "x", 1]
]]]]


BEGIN Function definition may not share external declaration with declarators (1)
int foo, bar(int x) {
}
EXPECT_MESSAGE
:1:21: error expected ';' but got '{'
EXPECT_AST
[[["var", "ES", "Si", "foo"]
 ,["fun", "E", ["F", "Si", "Si"], "bar"]]]


BEGIN Function definition may not share external declaration with declarators (2)
int bar(int x) {
}, foo;
DECLARATIONS
EXPECT_MESSAGE
:2:2: error unexpected token ','
EXPECT_AST
[
    ["fun", "E", ["F", "Si", "Si"], "bar", ["x"], ["block", []]],
    0
]


BEGIN Parameters have function prototype scope (1)
int foo(int foo) {
}
EXPECT_AST
[["fun", "E", ["F", "Si", "Si"], "foo", ["foo"], ["block", []]]]


BEGIN Parameters have function prototype scope (2)
int foo(int bar) {
    int bar;
}
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "Si", "Si"], "foo", ["bar"], ["block", [["var", "", "Si", "bar"]]]]]


BEGIN Cannot declare static function at block scope
void f(void) {
    static void foo(void);
}
DECLARATIONS
EXPECT_MESSAGE
:2:5: error invalid storage class
EXPECT_AST
[["fun", "E", ["F", "V"], "f", [""], ["block", [["fun", "", ["F", "V"], "foo"]]]]]


BEGIN Inline function with internal linkage
static inline void foo() {
}
EXPECT_AST
[["fun", "I", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Inline definition
inline void foo() {
}
EXPECT_AST
[["fun", "Ei", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Extern storage class prevents inline definition (1)
extern inline void foo() {
}
EXPECT_AST
[["fun", "E", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Extern storage class prevents inline definition (2)
extern void foo();
inline void foo() {
}
DECLARATIONS
EXPECT_AST
[["fun","E",["F", "V"],"foo",[],["block",[]]]
,[]]


BEGIN Extern storage class prevents inline definition (3)
inline void foo() {
}
extern void foo();
DECLARATIONS
EXPECT_AST
[["fun","E",["F", "V"],"foo",[],["block",[]]]
,[]]


BEGIN Inline specifier may be given multiple times
inline void inline foo() {
}
EXPECT_AST
[["fun", "Ei", ["F", "V"], "foo", [], ["block", []]]]


BEGIN Parameters may not be inline
void foo(inline int x);
EXPECT_MESSAGE
:1:10: error 'inline' may only appear on function
EXPECT_AST
[["fun", "E", ["F", "V", "Si"], "foo"]]


BEGIN Function definition with return statement
int main(int argc, const char* argv) {
    return argc;
}
DECLARATIONS
EXPECT_AST
[["fun", "E", ["F", "Si", "Si", ["P", ["Qc", "C"]]], "main", ["argc", "argv"], ["block", [
    ["return", "Nargc"]
]]]]


BEGIN Function declaration with nested declarators
int (*fpfi(int (*)(long), int))(int, float);
EXPECT_AST
[["fun","E",["F",["P",["F","Si","Si","Ff"]],["P",["F","Si","Sl"]],"Si"],"fpfi"]]
