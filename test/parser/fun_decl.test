BEGIN Function prototype with no parameters (1)
int foo();
EXPECT_AST
[["fun", "E", "()Si", "foo"]]


BEGIN Function prototype with no parameters (2)
int foo(void);
EXPECT_AST
[["fun", "E", "()Si", "foo"]]


BEGIN Function prototype with parameters
void foo(float x, float y);
EXPECT_AST
[["fun", "E", "(FfFf)V", "foo"]]


BEGIN Error if prototype has multiple void parameters (1)
int foo(void, void);
EXPECT_MESSAGE
:1:15: error a parameter may not have void type
EXPECT_AST
[["fun", "E", "()Si", "foo"]]


BEGIN Error if prototype has multiple void parameters (2)
int foo(float, void);
EXPECT_MESSAGE
:1:16: error a parameter may not have void type
EXPECT_AST
[["fun", "E", "(Ff)Si", "foo"]]


BEGIN Function parameters of function type are adjusted to pointer
int foo(int bar(void));
EXPECT_AST
[["fun", "E", "(P()Si)Si", "foo"]]


BEGIN Prototype and external linkage
extern int foo(float);
EXPECT_AST
[["fun", "E", "(Ff)Si", "foo"]]


BEGIN Prototype and internal linkage
static int foo(float);
EXPECT_AST
[["fun", "I", "(Ff)Si", "foo"]]


BEGIN Error if prototype has register storage class
register int foo(float);
EXPECT_MESSAGE
:1:1: error invalid storage class
EXPECT_AST
[["fun", "E", "(Ff)Si", "foo"]]


BEGIN Error if function parameter has invalid storage class
int foo(extern float);
EXPECT_MESSAGE
:1:9: error invalid storage class
EXPECT_AST
[["fun", "E", "(Ff)Si", "foo"]]


BEGIN Function parameter with (ignored) register storage class
void foo(register int);
EXPECT_AST
[["fun", "E", "(Si)V", "foo"]]


BEGIN Multiple function declarations
int foo(signed);
signed foo(int);
EXPECT_AST
[["fun", "E", "(Si)Si", "foo"]
,["fun", "E", "(Si)Si", "foo"]]


BEGIN Multiple function declarations with extern storage class
extern void foo(int);
extern void foo(int);
EXPECT_AST
[["fun", "E", "(Si)V", "foo"]
,["fun", "E", "(Si)V", "foo"]]


BEGIN Function declaration having internal linkage may not follow function declaration having external linkage
extern void foo(int);
static void foo(int);
EXPECT_MESSAGE
:2:1: error static declaration of 'foo' follows non-static declaration
:1:1: see prior declaration
EXPECT_AST
[["fun", "E", "(Si)V", "foo"]
,["fun", "I", "(Si)V", "foo"]]


BEGIN Function declaration having internal linkage may preceed function declaration having external linkage
static void foo(int);
extern void foo(int);
EXPECT_AST
[["fun","I","(Si)V","foo"]
,["fun","E","(Si)V","foo"]]


BEGIN Multiple function declarations with internal linkage
static void foo(int);
static void foo(int);
EXPECT_AST
[["fun","I","(Si)V","foo"]
,["fun","I","(Si)V","foo"]]


BEGIN Empty function definition
void foo(int) {
}
EXPECT_AST
[["fun", "E", "(Si)V", "foo", [""], ["block", []]]]


BEGIN Function definition with function declaration (1)
static void foo(int);
void foo(int x) {
}
EXPECT_AST
[["fun","I","(Si)V","foo"]
,["fun","E","(Si)V","foo",["x"],["block",[]]]]


BEGIN Function definition with function declaration (2)
void foo(int x) {
}
extern void foo(int);
EXPECT_AST
[["fun", "E", "(Si)V", "foo",[ "x"], ["block", []]]
,["fun", "E", "(Si)V", "foo"]]


BEGIN Error on function redefinition
void foo(int x) {
}
void foo(int x) {
}
EXPECT_MESSAGE
:3:1: error redefinition of 'foo'
:1:1: see prior definition


BEGIN Block scope extern storage class
void foo(int);
{
    extern void foo(int);
}
EXPECT_AST
[
    ["fun", "E", "(Si)V", "foo"],
    ["block", [
        ["fun","E","(Si)V","foo"]
    ]]
]


BEGIN Function definition with local variables
void foo() {
    int x = 1;
}
EXPECT_AST
[["fun", "E", "()V", "foo", [], ["block", [
    ["var", "", "Si", "x", "Si1"]
]]]]


BEGIN Function definition may not share external declaration with declarators (1)
int foo, bar(int x) {
}
EXPECT_MESSAGE
:1:21: error unexpected token
:2:1: error unexpected token
EXPECT_AST
[["var", "ES", "Si", "foo", ""]
,["fun", "E", "(Si)Si", "bar"]]


BEGIN Function definition may not share external declaration with declarators (2)
int bar(int x) {
}, foo;
EXPECT_MESSAGE
:2:2: error unexpected token
:2:4: error 'foo' undeclared
EXPECT_AST
[
    ["fun", "E", "(Si)Si", "bar", ["x"], ["block", []]],
    "Si0"
]


BEGIN Parameters have function prototype scope (1)
int foo(int foo) {
}
EXPECT_AST
[["fun", "E", "(Si)Si", "foo", ["foo"], ["block", []]]]


BEGIN Parameters have function prototype scope (2)
int foo(int bar) {
    int bar;
}
EXPECT_AST
[["fun", "E", "(Si)Si", "foo", ["bar"], ["block", [["var", "", "Si", "bar", ""]]]]]


BEGIN Cannot declare static function at block scope
{
    static void foo(void);
}
EXPECT_MESSAGE
:2:5: error invalid storage class
EXPECT_AST
[["block", [["fun", "", "()V", "foo"]]]]


BEGIN Inline function with internal linkage
static inline void foo() {
}
EXPECT_AST
[["fun", "I", "()V", "foo", [], ["block", []]]]


BEGIN Inline definition
inline void foo() {
}
EXPECT_AST
[["fun", "Ei", "()V", "foo", [], ["block", []]]]


BEGIN Extern storage class prevents inline definition (1)
extern inline void foo() {
}
EXPECT_AST
[["fun", "E", "()V", "foo", [], ["block", []]]]


BEGIN Extern storage class prevents inline definition (2)
extern void foo();
inline void foo() {
}
EXPECT_AST
[["fun","E","()V","foo"]
,["fun","E","()V","foo",[],["block",[]]]]


BEGIN Extern storage class prevents inline definition (3)
inline void foo() {
}
extern void foo();
EXPECT_AST
[["fun","E","()V","foo",[],["block",[]]]
,["fun","E","()V","foo"]]


BEGIN Inline specifier may be given multiple times
inline void inline foo() {
}
EXPECT_AST
[["fun", "Ei", "()V", "foo", [], ["block", []]]]


BEGIN Parameters may not be inline
void foo(inline int x);
EXPECT_MESSAGE
:1:10: error 'inline' may only appear on function
EXPECT_AST
[["fun", "E", "(Si)V", "foo"]]


BEGIN Function definition with return statement
int main(int argc, const char* argv) {
    return argc;
}
EXPECT_AST
[["fun", "E", "(SiPQcC)Si", "main", ["argc", "argv"], ["block", [
    ["return", "Nargc"]
]]]]
