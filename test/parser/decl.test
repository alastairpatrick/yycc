BEGIN Static storage class declaration
static x;
EXPECT_AST
[["var", "IS", "Is", "x"]]

BEGIN Extern storage class declaration
extern int x;
EXPECT_AST
[["var", "ESX", "Is", "x"]]

BEGIN Typedef storage class declaration
typedef int x;
EXPECT_AST
[["typedef", "Is", "x"]]

BEGIN Auto storage class declaration
auto int x;
EXPECT_AST
[["var", "S", "Is", "x"]]

BEGIN Register storage class declaration
register int x;
EXPECT_AST
[["var", "S", "Is", "x"]]

BEGIN Error on declaration with multiple storage classes
auto register x;
EXPECT_MESSAGE
:1:6: error too many storage classes
EXPECT_AST
[["var", "S", "Is", "x"]]


BEGIN void variable declaration
void x;
EXPECT_AST
[["var", "S", "V", "x"]]

BEGIN char variable declaration
char x;
EXPECT_AST
[["var", "S", "Cd", "x"]]

BEGIN signed char variable declaration
signed char x;
EXPECT_AST
[["var", "S", "Cs", "x"]]

BEGIN unsigned char variable declaration
char unsigned x;
EXPECT_AST
[["var", "S", "Cu", "x"]]

BEGIN short variable declaration
short x;
EXPECT_AST
[["var", "S", "Ss", "x"]]

BEGIN signed short variable declaration
short signed x;
EXPECT_AST
[["var", "S", "Ss", "x"]]

BEGIN short int variable declaration
short int x;
EXPECT_AST
[["var", "S", "Ss", "x"]]

BEGIN signed short int variable declaration
short signed int x;
EXPECT_AST
[["var", "S", "Ss", "x"]]

BEGIN unsigned short variable declaration
unsigned short x;
EXPECT_AST
[["var", "S", "Su", "x"]]

BEGIN int variable declaration
int x;
EXPECT_AST
[["var", "S", "Is", "x"]]

BEGIN signed variable declaration
signed x;
EXPECT_AST
[["var", "S", "Is", "x"]]

BEGIN signed int variable declaration
signed int x;
EXPECT_AST
[["var", "S", "Is", "x"]]

BEGIN unsigned variable declaration
unsigned x;
EXPECT_AST
[["var", "S", "Iu", "x"]]

BEGIN unsigned int variable declaration
int unsigned x;
EXPECT_AST
[["var", "S", "Iu", "x"]]

BEGIN long variable declaration
long x;
EXPECT_AST
[["var", "S", "Ls", "x"]]

BEGIN signed long variable declaration
signed long x;
EXPECT_AST
[["var", "S", "Ls", "x"]]

BEGIN long int variable declaration
int long x;
EXPECT_AST
[["var", "S", "Ls", "x"]]

BEGIN signed long int variable declaration
long int signed x;
EXPECT_AST
[["var", "S", "Ls", "x"]]

BEGIN unsigned long variable declaration
unsigned long x;
EXPECT_AST
[["var", "S", "Lu", "x"]]

BEGIN unsigned long int variable declaration
unsigned int long x;
EXPECT_AST
[["var", "S", "Lu", "x"]]

BEGIN long variable declaration
long long x;
EXPECT_AST
[["var", "S", "Ms", "x"]]

BEGIN signed long long variable declaration
signed long long x;
EXPECT_AST
[["var", "S", "Ms", "x"]]

BEGIN long long int variable declaration
int long long x;
EXPECT_AST
[["var", "S", "Ms", "x"]]

BEGIN signed long long int variable declaration
long long int signed x;
EXPECT_AST
[["var", "S", "Ms", "x"]]

BEGIN unsigned long long variable declaration
unsigned long long x;
EXPECT_AST
[["var", "S", "Mu", "x"]]

BEGIN unsigned long long int variable declaration
unsigned int long long x;
EXPECT_AST
[["var", "S", "Mu", "x"]]

BEGIN float variable declaration
float x;
EXPECT_AST
[["var", "S", "F", "x"]]

BEGIN double variable declaration
double x;
EXPECT_AST
[["var", "S", "D", "x"]]

BEGIN long double variable declaration
long double x;
EXPECT_AST
[["var", "S", "E", "x"]]

BEGIN bool variable declaration
_Bool x;
EXPECT_AST
[["var", "S", "Bu", "x"]]


BEGIN Error on duplicate type specifiers (except long)
short short x;
EXPECT_MESSAGE
:1:7: error invalid declaration specifier or type qualifier combination
EXPECT_AST
[["var", "S", "Ss", "x"]]


BEGIN Error on invalid type specifier combination
short float x;
EXPECT_MESSAGE
:1:7: error invalid type specifier combination
EXPECT_AST
[["var", "S", "Is", "x"]]


BEGIN Error on too many long type specifiers
long long long x;
EXPECT_MESSAGE
:1:11: error invalid type specifier combination
EXPECT_AST
[["var", "S", "Ms", "x"]]


BEGIN Const qualified declarators
const int x;
EXPECT_AST
[["var", "S", "QcIs", "x"]]


BEGIN Restrict qualified declarators
restrict int x;
EXPECT_AST
[["var", "S", "QrIs", "x"]]


BEGIN Restrict qualified declarators
volatile int x;
EXPECT_AST
[["var", "S", "QvIs", "x"]]


BEGIN Multiply qualified declarators
int volatile restrict const x;
EXPECT_AST
[["var", "S", "QcrvIs", "x"]]


BEGIN Declaration type qualifiers may be repeated
volatile volatile x;
EXPECT_AST
[["var", "S", "QvIs", "x"]]


BEGIN Multiple declarators
int x, y;
EXPECT_AST
[["var", "S", "Is", "x"]
,["var", "S", "Is", "y"]]


BEGIN Declaration with no declarators
short;
EXPECT_AST
[]


BEGIN Declaration with missing declarator identifiers
short,;
EXPECT_MESSAGE
:1:6: error expected identifier
EXPECT_AST
[]


BEGIN Declarators must be separated by comma
short a b;
EXPECT_MESSAGE
:1:9: error unexpected token
EXPECT_AST
[["var", "S", "Ss", "a"]]


BEGIN Pointer declarators
int **x, *y;
EXPECT_AST
[["var", "S", "PPIs", "x"]
,["var", "S", "PIs", "y"]]


BEGIN Const declarator
int* const y;
EXPECT_AST
[["var", "S", "QcPIs", "y"]]


BEGIN Restrict declarator
int* restrict y;
EXPECT_AST
[["var", "S", "QrPIs", "y"]]


BEGIN Volatile declarator
int* volatile y;
EXPECT_AST
[["var", "S", "QvPIs", "y"]]


BEGIN Declarator with multiple qualifiers interleaved with pointers
int x, * const * volatile restrict y;
EXPECT_AST
[["var", "S", "Is", "x"]
,["var", "S", "QrvPQcPIs", "y"]]


BEGIN Declarator initializers
int x = 1, y = 2;
EXPECT_AST
[["var", "S", "Is", "x", "Is1"]
,["var", "S", "Is", "y", "Is2"]]


BEGIN Declarators in parentheses
int ((x)), (*y);
EXPECT_AST
[["var", "S", "Is", "x"]
,["var", "S", "PIs", "y"]]


BEGIN Collapses variable definition into variable declaration (1)
extern int x;
int x;
EXPECT_AST
[["var", "ES", "Is", "x"]]


BEGIN Collapses variable definition into variable declaration (2)
int x;
extern int x;
EXPECT_AST
[["var", "ES", "Is", "x"]]


BEGIN Collapses variable initialization into variable declaration (1)
extern int x;
int x = 1;
EXPECT_AST
[["var", "ES", "Is", "x", "Is1"]]


BEGIN Collapses variable initialization  into variable declaration (2)
int x = 1;
extern int x;
EXPECT_AST
[["var", "ES", "Is", "x", "Is1"]]


BEGIN Function prototype with no parameters (1)
int foo();
EXPECT_AST
[["fun", "", "()Is", "foo"]]


BEGIN Function prototype with no parameters (2)
int foo(void);
EXPECT_AST
[["fun", "", "()Is", "foo"]]


BEGIN Function prototype with parameters
void foo(float x, float y);
EXPECT_AST
[["fun", "", "(FF)V", "foo"]]


BEGIN Error if prototype has multiple void parameters (1)
int foo(void, void);
EXPECT_MESSAGE
:1:15: error a parameter may not have void type
EXPECT_AST
[["fun", "", "()Is", "foo"]]


BEGIN Error if prototype has multiple void parameters (2)
int foo(float, void);
EXPECT_MESSAGE
:1:16: error a parameter may not have void type
EXPECT_AST
[["fun", "", "(F)Is", "foo"]]


BEGIN Function parameters of function type are adjusted to pointer
int foo(int bar(void));
EXPECT_AST
[["fun", "", "(P()Is)Is", "foo"]]


BEGIN Prototype and external linkage
extern int foo(float);
EXPECT_AST
[["fun", "E", "(F)Is", "foo"]]


BEGIN Prototype and internal linkage
static int foo(float);
EXPECT_AST
[["fun", "I", "(F)Is", "foo"]]


BEGIN Error if prototype has register storage class
register int foo(float);
EXPECT_MESSAGE
:1:1: error invalid storage class
EXPECT_AST
[["fun", "", "(F)Is", "foo"]]


BEGIN Error if function parameter has invalid storage class
int foo(extern float);
EXPECT_MESSAGE
:1:9: error invalid storage class
EXPECT_AST
[["fun", "", "(F)Is", "foo"]]


BEGIN Function parameter with (ignored) register storage class
void foo(register int);
EXPECT_AST
[["fun", "", "(Is)V", "foo"]]


BEGIN Consistent prototypes for function
int foo(signed);
signed foo(int);
EXPECT_AST
[["fun", "", "(Is)Is", "foo"]]


BEGIN Error on inconsistent function prototype.
void foo(int, short);
void foo(int, int);
EXPECT_MESSAGE
:2:1: error redeclaration of 'foo' with different type
:1:1: see original declaration
EXPECT_AST
[["fun", "", "(IsSs)V", "foo"]]


BEGIN Function declarations having no linkage collapse
void foo(int);
void foo(int);
EXPECT_AST
[["fun", "", "(Is)V", "foo"]]


BEGIN Function declaration having no linkage collapses with function declaration having external linkage
void foo(int);
extern void foo(int);
EXPECT_AST
[["fun", "E", "(Is)V", "foo"]]


BEGIN Function declaration having no linkage collapses with function declaration having internal linkage
void foo(int);
static void foo(int);
EXPECT_MESSAGE
:2:1: error static declaration of 'foo' follows non-static
EXPECT_AST
[["fun", "", "(Is)V", "foo"]]


BEGIN Function declaration having external linkage collapses with function declaration having no linkage
extern void foo(int);
void foo(int);
EXPECT_AST
[["fun", "E", "(Is)V", "foo"]]


BEGIN Function declarations having external linkage collapse
extern void foo(int);
extern void foo(int);
EXPECT_AST
[["fun", "E", "(Is)V", "foo"]]


BEGIN Function declaration having external linkage does not collapse with function declaration having internal linkage
extern void foo(int);
static void foo(int);
EXPECT_MESSAGE
:2:1: error static declaration of 'foo' follows non-static
EXPECT_AST
[["fun", "E", "(Is)V", "foo"]]


BEGIN Function declaration having internal linkage collapses with function declaration having no linkage
static void foo(int);
void foo(int);
EXPECT_AST
[["fun", "I", "(Is)V", "foo"]]


BEGIN Function declaration having internal linkage collapses with function declaration having external linkage
static void foo(int);
extern void foo(int);
EXPECT_AST
[["fun", "I", "(Is)V", "foo"]]


BEGIN Function declarations having internal linkage collapse
static void foo(int);
static void foo(int);
EXPECT_AST
[["fun", "I", "(Is)V", "foo"]]


BEGIN Empty function definition
void foo(int) {
}
EXPECT_AST
[["fun", "", "(Is)V", "foo", [""], ["block", []]]]


BEGIN Collapses function definition into function declaration (1)
static void foo(int);
void foo(int x) {
}
EXPECT_AST
[["fun", "I", "(Is)V", "foo", ["x"], ["block", []]]]


BEGIN Collapses function definition into function declaration (2)
void foo(int x) {
}
extern void foo(int);
EXPECT_AST
[["fun", "E", "(Is)V", "foo", ["x"], ["block", []]]]


BEGIN Error on function redefinition
extern void foo(int) {
}
extern void foo(int) {
}
EXPECT_MESSAGE
:3:1: error redefinition of 'foo'
:1:1: see original definition
EXPECT_AST
[["fun", "E", "(Is)V", "foo", [""], ["block", []]]]


BEGIN File scope none storage class, then block scope extern storage class yields extern
void foo(int);
{
    extern void foo(int);
}
EXPECT_AST
[
    ["fun", "E", "(Is)V", "foo"],
    ["block", []]
]


BEGIN Other declarations of identifier at block scope must have same type (1)
{
    extern int foo(void);
    {
        int foo; // OKAY (no linkage)
        {
            extern float foo(void); // ERROR
        }
    }
}
EXPECT_MESSAGE
:6:13: error redeclaration of 'foo' with different type
:2:5: see original declaration


BEGIN Other declarations of identifier at block scope must have same type (2)
{
    extern int foo(void);
    {
        extern int foo;  // ERROR
    }
}
EXPECT_MESSAGE
:4:9: error redeclaration of 'foo' with different type
:2:5: see original declaration


BEGIN Other declarations of identifier at block scope must have same type (3)
{
    extern int a(void);
}
{
    extern float a(void);
}
EXPECT_MESSAGE
:5:5: error redeclaration of 'a' with different type
:2:5: see original declaration


BEGIN Function definition with local variables
void foo() {
    int x = 1;
}
EXPECT_AST
[["fun", "", "()V", "foo", [], ["block", [
    ["var", "", "Is", "x", "Is1"]
]]]]


BEGIN Function definition may not share external declaration with declarators (1)
int foo, bar(int x) {
}
EXPECT_MESSAGE
:1:21: error unexpected token
:2:1: error unexpected token
EXPECT_AST
[["var", "S", "Is", "foo"]
,["fun", "", "(Is)Is", "bar"]]


BEGIN Function definition may not share external declaration with declarators (2)
int bar(int x) {
}, foo;
EXPECT_MESSAGE
:2:2: error unexpected token
:2:4: error use of undeclared identifier 'foo'
EXPECT_AST
[
    ["fun", "", "(Is)Is", "bar", ["x"], ["block", []]],
    "Is0"
]


BEGIN Parameters have function prototype scope (1)
int foo(int foo) {
}
EXPECT_AST
[["fun", "", "(Is)Is", "foo", ["foo"], ["block", []]]]


BEGIN Parameters have function prototype scope (2)
int foo(int bar) {
    int bar;
}
EXPECT_AST
[["fun", "", "(Is)Is", "foo", ["bar"], ["block", [["var", "", "Is", "bar"]]]]]


BEGIN Cannot declare static function at block scope
{
    static void foo(void);
}
EXPECT_MESSAGE
:2:5: error invalid storage class
EXPECT_AST
[["block", [["fun", "", "()V", "foo"]]]]


BEGIN Variable declaration of typedef type.
typedef short foo_t;
foo_t foo;
EXPECT_AST
[["typedef", "Ss", "foo_t"]
,["var", "S", "Ss", "foo"]]


BEGIN Typedef with no declarators
typedef;
EXPECT_AST
[]


BEGIN Consistent redefinition of typedef
typedef int a;
typedef signed a;
EXPECT_AST
[["typedef", "Is", "a"]]


BEGIN Inconsistent redefinition of typedef
typedef int a;
typedef long a;
EXPECT_MESSAGE
:2:1: error redeclaration of 'a' with different type
:1:1: see original declaration
EXPECT_AST
[["typedef", "Is", "a"]]


BEGIN Typedefs use block scope
typedef int a;
{
    typedef long a;
}
EXPECT_AST
[
    ["typedef", "Is", "a"],
    ["block", [
        ["typedef", "Ls", "a"]]
    ]
]


BEGIN Typedef as self
typedef int a;
typedef a a;
EXPECT_AST
[["typedef", "Is", "a"]]


BEGIN Disambiguates between multiplication and variable declaration of pointer type
int p, q;
{
    q * p; // "q" is not a type so this is multiplication.
    typedef short q;
    q * v; // now "q" is a type so this declares variable "v" with type "q*".
}
EXPECT_AST
[
    ["var", "S", "Is", "p"],
    ["var", "S", "Is", "q"],
    ["block", [
        ["*", "Nq", "Np"],
        ["typedef", "Ss", "q"],
        ["var", "", "PSs", "v"]
    ]
]]


BEGIN Typedef goes out of scope immediately following block
int p, q;
{
    typedef long q;
}
q * p; // Identifier "q" immediately follows '}'
EXPECT_AST
[
    ["var", "S", "Is", "p"],
    ["var", "S", "Is", "q"],
    ["block", [
        ["typedef", "Ls", "q"]
    ]],
    ["*", "Nq", "Np"]
]


BEGIN Typedef may not be used as a variable.
typedef long p;
p+p;
EXPECT_MESSAGE
:2:2: error expected identifier
:2:2: error unexpected token
:2:3: error unexpected token
EXPECT_AST
[["typedef", "Ls", "p"]]


BEGIN Function definition with expression statement
int main(int argc, const char* argv) {
    return argc;
}
EXPECT_AST
[["fun", "", "(IsPQcCd)Is", "main", ["argc", "argv"], ["block", [
    ["return", "Nargc"]
]]]]
