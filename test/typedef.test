BEGIN Variable declaration of typedef type.
typedef short foo_t;
foo_t foo;
EXPECT_AST
[["typedef", "Ss", "foo_t"]
,["var", "ES", "Ss", "foo", ""]]


BEGIN Variable declaration of typedef type (preparse).
foo_t foo;
typedef short foo_t;
PREPARSE
EXPECT_AST
[["var", "ES", "Nfoo_t", "foo", ""]
,["typedef", "Ss", "foo_t"]]


BEGIN Typedef with no declarators
typedef;
EXPECT_MESSAGE
:1:1: error invalid type specifier combination
EXPECT_AST
[["declare","Si"]]


BEGIN Typedef in block scope
typedef int a;
void f(void) {
    typedef long a;
}
DECLARATIONS
EXPECT_AST
[
    ["typedef", "Si", "a"],
    ["fun","E",["F", "V"],"f",[""], ["block", [
        ["typedef", "Sl", "a"]]
    ]]
]


BEGIN Disambiguates between multiplication and variable declaration of pointer type
int p, q;
void f(void) {
    q * p; // "q" is not a type so this is multiplication.
    typedef short q;
    q * v; // now "q" is a type so this declares variable "v" with type "q*".
}
DECLARATIONS
EXPECT_AST
[
    [["var", "ES", "Si", "p", ""],
     ["var", "ES", "Si", "q", ""]],
    ["fun","E",["F", "V"],"f",[""], ["block", [
        ["*", "Nq", "Np"],
        ["typedef", "Ss", "q"],
        ["var", "", ["P", "Ss"], "v", ""]
    ]]]
]


BEGIN Typedef goes out of scope immediately following block
void f(void) {
    int p, q;
    {
        typedef long q;
    }
    q * p; // Identifier "q" immediately follows '}'
}
DECLARATIONS
EXPECT_AST
[["fun","E",["F", "V"],"f",[""], ["block", [
    [["var", "", "Si", "p", ""],
     ["var", "", "Si", "q", ""]],
    ["block", [
        ["typedef", "Sl", "q"]
    ]],
    ["*", "Nq", "Np"]
]]]]


BEGIN Typedef may not be used as a variable.
typedef long p;
void f(void) {
    p+p;
}
DECLARATIONS
EXPECT_MESSAGE
:3:6: error expected identifier but got '+'
EXPECT_AST
[["typedef","Sl","p"],["fun","E",["F", "V"],"f",[""],["block",[["declare","Sl"]]]]]


BEGIN Typedef may not be inline
inline typedef int A;
EXPECT_MESSAGE
:1:1: error 'inline' may only appear on function
EXPECT_AST
[["typedef", "Si", "A"]]


BEGIN Struct typedef
typedef struct { int x; int y; } z;
EXPECT_AST
[["typedef", ["STRUCT", [["x", "Si"], ["y", "Si"]]], "z"]]


BEGIN Error on typedef with bit-field
typedef int T: 2;
EXPECT_MESSAGE
:1:14: error expected ';' but got ':'
EXPECT_AST
[["typedef", "Si", "T"]]


BEGIN Typedef of type declared in other translation unit
typedef T S;
PREPARSE
EXPECT_AST
[["typedef", "NT", "S"]]


BEGIN #static type directive
#static type T
DECLARATIONS
EXPECT_GLOBALS
[["typedef","?","T"]]


BEGIN #static type resolves ambiguity as to whether identifier is type or not
#static type T
void f(void) {
    T * v; // "T" is a type so this declares variable "v" with type "T*".
}
DECLARATIONS
EXPECT_AST
[
    ["fun","E",["F","V"],"f",[""],
        ["block",[
            ["var","",["P","?"],"v",""]
        ]]
    ]
]
