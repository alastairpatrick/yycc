BEGIN Untagged struct definition with declarator
struct { int x; int y; } z;
EXPECT_GLOBALS
[["var","ES",["STRUCT",[["x","Si"],["y","Si"]]],"z"]]


BEGIN Tagged struct definition
struct S { int x; int y; };
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Struct member names must be distinct
struct S { int x; int x; };
DECLARATIONS
EXPECT_MESSAGE
:1:23: error duplicate member 'x'...
:1:16: ...see other
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["x","Si"]]],"S"]]


BEGIN Tagged struct with multiple compatible definitions
struct S { int x; int y; };
struct S { int x; int y; };
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Tagged structs with incompatible definitions
struct S { int x; int y; };
struct S { int y; int x; };
DECLARATIONS
EXPECT_MESSAGE
:2:1: error redefinition of struct 'S' with incompatible type...
:1:1: ...see other
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Tagged incomplete struct
struct S;
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]]


BEGIN Tagged incomplete struct with declarator
struct S z;
EXPECT_AST
[["var","ES",["STRUCT",["?"]],"z"]]
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]
,["var","ES",["STRUCT",["?"]],"z"]]


BEGIN Compatible incomplete declarations of struct
struct S;
struct S;
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]]


BEGIN Tagged struct with incomplete and complete definitions (1)
struct S;
struct S { int x; int y; };
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Tagged struct with incomplete and complete definitions (2)
struct S { int x; int y; };
struct S;
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Bit-field
struct { int x: 15; int y: 17; } z;
EXPECT_AST
[["var", "ES", ["STRUCT", [["x", "Si", 15], ["y", "Si", 17]]], "z"]]


BEGIN Anonymous struct
struct {
    struct { int x; };
} z;
EXPECT_AST
[["var","ES",["STRUCT",[["",["STRUCT",[["x","Si"]]]]]],"z"]]


BEGIN Multiple anonymous struct
struct {
    struct { int x; };
    struct { int y; };
} z;
EXPECT_AST
[["var","ES",["STRUCT",[["",["STRUCT",[["x","Si"]]]],["",["STRUCT",[["y","Si"]]]]]],"z"]]


BEGIN Multiple anonymous struct with duplicate members
struct {
    struct { int x; };
    struct { int x; };
} z;
DECLARATIONS
EXPECT_MESSAGE
:3:18: error duplicate member 'x'...
:2:18: ...see other
EXPECT_AST
[["var","ES",["STRUCT",[["",["STRUCT",[["x","Si"]]]],["",["STRUCT",[["x","Si"]]]]]],"z"]]


BEGIN Anonymous union in struct
struct {
    union { int x; };
} z;
EXPECT_AST
[["var","ES",["STRUCT",[["",["UNION",[["x","Si"]]]]]],"z"]]


BEGIN Tagged structs with multiple definitions and anonymous struct
struct S { struct { int x; }; };
struct S { struct { int x; }; };
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["STRUCT",[["x","Si"]]]]]],"S"]]


BEGIN Tagged structs with multiple definitions and incompatible anonymous struct
struct S { struct { int x; }; };
struct S { struct { int y; }; };
DECLARATIONS
EXPECT_MESSAGE
:2:1: error redefinition of struct 'S' with incompatible type...
:1:1: ...see other
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["STRUCT",[["x","Si"]]]]]],"S"]]


BEGIN Tagged structs with multiple definitions and anonymous union
struct S { union { int y; int x; }; };
struct S { union { int x; int y; }; };
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["UNION",[["y","Si"],["x","Si"]]]]]],"S"]]


BEGIN Anonymous non-structured member with no declarators.
struct {
    int;
} z;
EXPECT_AST
[["var","ES",["STRUCT",[]],"z"]]


BEGIN Error on bit-field variable
int x: 2;
EXPECT_MESSAGE
:1:6: error expected ';' but got ':'
EXPECT_AST
[["var", "ES", "Si", "x"]]


BEGIN Standalone struct keyword
struct;
EXPECT_AST
[[]]
EXPECT_GLOBALS
[]


BEGIN Struct members are not added to symbol map
int x;
struct Foo {
    float x, y;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Ff"],["y","Ff"]]],"Foo"]
,["var","ES","Si","x"]]


BEGIN Struct is in scope within body (1)
struct S {
    S* p;
};
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["p",["P","recursive"]]]],"S"]]


BEGIN Struct is in scope within body (2)
struct S {
    typedef S T;
    T* p;
};
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["T","recursive"],["p",["P","recursive"]]]],"S"]]


BEGIN Struct is in scope within body (3)
#type S
struct S {
    S* p;
};
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["p",["P","recursive"]]]],"S"]]


BEGIN Struct members must have complete type (1)
struct T;
struct S {
    T x;
};
DECLARATIONS
EXPECT_MESSAGE
:3:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (2)
struct S {
    S x;
};
DECLARATIONS
EXPECT_MESSAGE
:2:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (3)
#type T
struct S {
    T x;
};
struct T {
    S x;
};
DECLARATIONS
EXPECT_MESSAGE
:3:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (4)
struct S {
    struct T x;
};
DECLARATIONS
EXPECT_MESSAGE
:2:14: error member 'x' has incomplete type
END


BEGIN Error on combination of struct specifier and type specifier
typedef float T;
T struct S v;
EXPECT_MESSAGE
:2:3: error invalid type specifier combination
EXPECT_AST
[["typedef","Ff","T"]
,["var","ES","Si","v"]]


BEGIN typeof member
struct S {
    double x;
    typeof(x) y;
};
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Fd"],["y","Fd"]]],"S"]]


BEGIN Size of struct
struct S {
    int x, y;
};
char a[sizeof(S)];
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]
,["var","ES",["A","C",8],"a"]]


BEGIN Typedef members do not contribute to size of struct
struct S {
    typedef int T;
    int x;
};
char a[sizeof(S)];
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[["T","Si"],["x","Si"]]],"S"]
,["var","ES",["A","C",4],"a"]]


BEGIN Struct binds to prior declation
struct S {};
struct T {
    struct S x;
};
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",[]],"S"]
,["typedef",["STRUCT",[["x",["STRUCT",[]]]]],"T"]]


BEGIN Scoped struct declares new type at file scope
struct T {
    struct S* x;
};
S* y;
DECLARATIONS
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]
,["typedef",["STRUCT",[["x",["P",["STRUCT",["?"]]]]]],"T"]
,["var","ES",["P",["STRUCT",["?"]]],"y"]]
