BEGIN Struct member names must be distinct
struct S { int x; int x; };
EXPECT_MESSAGE
:1:23: error duplicate member 'x'...
:1:16: ...see other
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["x","Si"]]],"S"]]


BEGIN Tagged structs with incompatible definitions
struct S { int x; int y; };
struct S { int y; int x; };
EXPECT_MESSAGE
:2:1: error redefinition of struct 'S' with incompatible type...
:1:1: ...see other
END


BEGIN Tagged struct with multiple compatible definitions
struct S { int x; int y; };
struct S { int x; int y; };
EXPECT_MESSAGE
:2:1: error redefinition of struct 'S' with incompatible type...
:1:1: ...see other
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Compatible incomplete declarations of struct
struct S;
struct S;
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]]


BEGIN Tagged struct with incomplete and complete definitions (1)
struct S;
struct S { int x; int y; };
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Tagged struct with incomplete and complete definitions (2)
struct S { int x; int y; };
struct S;
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]]


BEGIN Anonymous struct with duplicate members
struct {
    struct { int x; };
    struct { int x; };
} z;
EXPECT_MESSAGE
:3:18: error duplicate member 'x'...
:2:18: ...see other
EXPECT_AST
[["var","ES",["STRUCT",[["",["STRUCT",[["x","Si"]]]],["",["STRUCT",[["x","Si"]]]]]],"z"]]


BEGIN Duplicate member in anonymous struct
struct S {
    int x;
    struct { int x; };
};
EXPECT_MESSAGE
:3:18: error duplicate member 'x'...
:2:9: ...see other
END


BEGIN Struct is in scope within body (1)
struct S {
    S* p;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["p",["P","recursive"]]]],"S"]]


BEGIN Struct is in scope within body (2)
struct S {
    typedef S T;
    T* p;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["T","recursive"],["p",["P","recursive"]]]],"S"]]


BEGIN Struct is in scope within body (3)
#type S
struct S {
    S* p;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["p",["P","recursive"]]]],"S"]]


BEGIN Struct members must have complete type (1)
struct T;
struct S {
    T x;
};
EXPECT_MESSAGE
:3:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (2)
struct S {
    S x;
};
EXPECT_MESSAGE
:2:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (3)
#type T
struct S {
    T x;
};
struct T {
    S x;
};
EXPECT_MESSAGE
:6:7: error member 'x' has incomplete type
END


BEGIN Struct members must have complete type (4)
struct S {
    struct T x;
};
EXPECT_MESSAGE
:2:14: error member 'x' has incomplete type
END


BEGIN typeof member
struct S {
    double x;
    typeof(x) y;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Fd"],["y","Fd"]]],"S"]]


BEGIN Size of struct
struct S {
    int x, y;
};
char a[sizeof(S)];
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"],["y","Si"]]],"S"]
,["var","ES",["A","C",8],"a"]]


BEGIN Typedef members do not contribute to size of struct
struct S {
    typedef int T;
    int x;
};
char a[sizeof(S)];
EXPECT_GLOBALS
[["typedef",["STRUCT",[["T","Si"],["x","Si"]]],"S"]
,["var","ES",["A","C",4],"a"]]


BEGIN Struct binds to prior declation
struct S {};
struct T {
    struct S x;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[]],"S"]
,["typedef",["STRUCT",[["x",["STRUCT",[]]]]],"T"]]


BEGIN Scoped struct declares new type at file scope
struct T {
    struct S* x;
};
S* y;
EXPECT_GLOBALS
[["typedef",["STRUCT",["?"]],"S"]
,["typedef",["STRUCT",[["x",["P",["STRUCT",["?"]]]]]],"T"]
,["var","ES",["P",["STRUCT",["?"]]],"y"]]


BEGIN Bit field size must be integer constant expression
struct S {
    int x: 1.5;
};
EXPECT_MESSAGE
:2:12: error bit field 'x' must have integer type, not 'double'
END


BEGIN Bit field size must be positive
struct S {
    int x: 0;
};
EXPECT_MESSAGE
:2:12: error bit field 'x' has invalid width (0 bits)
END


BEGIN Bit field size must be no more than its type
struct S {
    int x: 33;
};
EXPECT_MESSAGE
:2:12: error width of bit field 'x' (33 bits) exceeds width of its type 'int' (32 bits)
END


BEGIN Bit field type must be integer
struct S {
    float x: 8;
};
EXPECT_MESSAGE
:2:11: error bit field 'x' has non-integer type 'float'
END


BEGIN Resolves tag type declarators declared in struct
struct S {
    enum { A=1+1 };
    char a[A];
};
EXPECT_GLOBALS
[["ec","A",2],
["typedef",["STRUCT",[["a",["A","C",2]]]],"S"]]


BEGIN #var in struct definition
struct S {
    #var x
    int x;
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["x","Si"]]],"S"]]
END


BEGIN #func in struct definition
struct S {
    #func f
    int f();
};
EXPECT_GLOBALS
[["typedef",["STRUCT",[["f",["F","Si"]]]],"S"]]
END


BEGIN Unmatched #var in struct definition
struct S {
    #var x
    int f() { return x; }
};
EXPECT_MESSAGE
:2:10: error declaration directive not matched with a proper declaration of 'x'
END


BEGIN Declaration using nested typedef
struct S {
    typedef int T;
};
S.T x;
EXPECT_GLOBALS
[["typedef",["STRUCT",[["T","Si"]]],"S"],["var","ES","Si","x"]]


BEGIN Declaration using nested struct
struct S {
    struct T {};
};
S.T x;
EXPECT_GLOBALS
[["typedef",["STRUCT",[["",["STRUCT",[]]]]],"S"],["typedef",["STRUCT",[]],"T"]
,["var","ES",["STRUCT",[]],"x"]]


BEGIN Error on attempt to use non-type member as nested type
struct S {
    int T;
};
S.T x;
EXPECT_MESSAGE
:4:3: error no nested type named 'T' in 'struct S'...
:1:1: ...see 'struct S'
END


BEGIN Error on missing nested type
struct S {
};
S.T x;
EXPECT_MESSAGE
:3:3: error no nested type named 'T' in 'struct S'...
:1:1: ...see 'struct S'
END


BEGIN Error on attempt to look for nested type within enum
enum E {
};
E.T x;
EXPECT_MESSAGE
:3:3: error type 'enum E' may not contain a nested type 'T'
END


BEGIN Error on attempt to look for nested type within incomplete struct
struct S;
S.T x;
EXPECT_MESSAGE
:2:3: error incomplete type 'struct S' named in nested type specifier
:1:1: ...see 'struct S'
END


