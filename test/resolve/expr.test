BEGIN Resolves cast expression
int v = (int[1+1]) 0;
RESOLVE
EXPECT_AST
[["var","ES","Si","v",["cast",["A","Si",2],0]]]


BEGIN Member expression binds to member variable of struct (1)
struct S {
};
void f(S s) {
    s.x;
}
EXPECT_MESSAGE
:4:6: error no member named 'x' in 'struct S'...
:1:1: ... see type definition
END


BEGIN Member expression binds to member variable of struct (2)
struct S {
    int x;
};
void f(S s) {
    s.x;
}
END


BEGIN Member expression binds to nested member function of struct (1)
struct S {
};
void f(S s) {
    s.f();
}
EXPECT_MESSAGE
:4:6: error no member named 'f' in 'struct S'...
:1:1: ... see type definition
END


BEGIN Member expression binds to nested member function of struct (2)
struct S {
    int f() {}
};
void f(S s) {
    s.f();
}
END


BEGIN Type member expression binds to member of struct (1)
struct S {
};
void f() {
    int x = S.f();
}
EXPECT_MESSAGE
:4:14: error no member named 'f' in 'struct S'...
:1:1: ... see type definition
END


BEGIN Type member expression binds to member of struct (2)
struct S {
    int f();
};
int f() {
    return S.f();
}
END


BEGIN Type member expression binds to member of struct (3)
struct S {
    struct T {
        int f();
    };
};
void f() {
    return S.T.f();
}
END


BEGIN Type member expression binds to member of struct using cast variant (1)
struct S {
};
void f() {
    (S).f();
}
EXPECT_MESSAGE
:4:9: error no member named 'f' in 'struct S'...
:1:1: ... see type definition
END


BEGIN Type member expression binds to member of struct using cast variant (2)
struct S {
    void f();
};
void f() {
    (S).f();
}
END


BEGIN Type member expression binds to member of struct using cast variant (3)
struct S {
    struct T {
        void f();
    };
};
void f() {
    (S.T).f();
}
END


BEGIN Type member expression binds to member of qualified struct using cast variant
struct S {
    void f();
};
void f() {
    (const S).f();
}
END


BEGIN Error if type member expression identifier isn't
struct S {
};
void f() {
    S."x";
}
EXPECT_MESSAGE
:4:7: error unexpected token '"x"'
END


BEGIN Resolves member expression in same namespace as struct definition
#namespace Z
struct S {
    int x;
};
S s;
int* p = &s.x;
END


BEGIN Resolves member expression in different namespace from struct definition
#namespace Y
struct S {
    int x;
};

#namespace Z
#using ::Y::S
S s;
int* p = &s.x;
END


BEGIN When resolving member expression, only unqualified identifier is combined with prefix of referenced type
#namespace Y
struct S {
#namespace Y::Z
    int x;
};

#using ::Y::S
S s;
int* p = &s.Z::x;
EXPECT_MESSAGE
:9:12: error no member named 'Z::x' in 'struct Y::S'...
:2:1: ... see type definition
END
