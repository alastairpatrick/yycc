BEGIN Calculates value of constant lacking intializer
enum { A, B } z;
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 0], ["ec", "B", 1]]], "z"]]


BEGIN Calculates value of constant lacking intializer
enum { A=1, B } z;
EXPECT_AST
[["var", "ES", ["ENUM", [["ec", "A", 1], ["ec", "B", 2]]], "z"]]


BEGIN Enum constant names must be distinct
enum E { A, A };
EXPECT_MESSAGE
:1:13: error redefinition of enum constant 'A'...
:1:10: ...see other
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0],["ec","A",1]]],"E"]]


BEGIN Tagged enum with multiple incompatible definitions
enum E { A };
enum E { B };
EXPECT_MESSAGE
:2:1: error redefinition of typedef 'E' with incompatible type...
:1:1: ...see other
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"]]


BEGIN Tagged enum with multiple compatible definitions
enum E { A, };
enum E { A };
EXPECT_MESSAGE
:2:1: error redefinition of typedef 'E' with incompatible type...
:1:1: ...see other
:2:10: error redefinition of enum constant 'A'...
:1:10: ...see other
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"]]


BEGIN Complete enum compatible with incomplete enum (1)
enum E;
enum E { A, B };
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Complete enum compatible with incomplete enum (2)
enum E { A, B };
enum E;
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Different enums may not contain the same constants (1)
enum { A, B } a;
enum { A, C } b;
EXPECT_MESSAGE
:2:8: error redefinition of enum constant 'A'...
:1:8: ...see other
END


BEGIN Different enums may not contain the same constants (2)
enum E1 { A, B };
enum E2 { A, C };
EXPECT_MESSAGE
:2:11: error redefinition of enum constant 'A'...
:1:11: ...see other
END


BEGIN Scoped enum constants do not conflict
enum E1 { .A=1 };
enum E2 { .A=2 };
EXPECT_GLOBALS
[["typedef",["ENUM",[["ec","A",1]]],"E1"]
,["typedef",["ENUM",[["ec","A",2]]],"E2"]]


BEGIN Enum constant folding
enum E { A = 1+1 };
EXPECT_GLOBALS
[["ec","A",2],["typedef",["ENUM",[["ec","A",2]]],"E"]]


BEGIN Enum constant may refer to prior constants
enum E { A = 1, B = A };
EXPECT_GLOBALS
[["ec","A",1],["ec","B",1],["typedef",["ENUM",[["ec","A",1],["ec","B",1]]],"E"]]


BEGIN Enum constant may refer to sizeof prior constant (1)
enum E { A, B = sizeof(A) };
EXPECT_GLOBALS
[["ec","A",0],["ec","B",4],["typedef",["ENUM",[["ec","A",0],["ec","B",4]]],"E"]]


BEGIN Enum constant may refer to sizeof prior constant (2)
enum E: char { A, B = sizeof(A) };
EXPECT_GLOBALS
[["ec","A",0],["ec","B",1],["typedef",["ENUM","C",[["ec","A",0],["ec","B",1]]],"E"]]


BEGIN Enum constant may refer to sizeof prior constant (3)
typedef char T;
enum E: T { A, B = sizeof(A) };
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",1]
,["typedef",["ENUM","C",[["ec","A",0],["ec","B",1]]],"E"]
,["typedef","C","T"]]


BEGIN Error if enum base type is not an integer type
typedef float T;
enum E: T { A, B = sizeof(A) };
EXPECT_MESSAGE
:2:1: error type 'float' is not a valid integer enum base type
EXPECT_GLOBALS
[["ec","A",0]
,["ec","B",4]
,["typedef",["ENUM",[["ec","A",0],["ec","B",4]]],"E"]
,["typedef","Ff","T"]]


BEGIN Enum constant may not refer to following constants (1)
enum E { B = A, A = 1 };
EXPECT_MESSAGE
:1:14: error enum constant 'A' not yet available
:1:17: see definition of enum constant 'A'
EXPECT_GLOBALS
[["ec","A",1],["ec","B",0],["typedef",["ENUM",[["ec","B",0],["ec","A",1]]],"E"]]


BEGIN Enum constant may not refer to following constants (2)
#enum A
enum E { B = A, A = 1 };
EXPECT_MESSAGE
:2:14: error enum constant 'A' not yet available
:2:17: see definition of enum constant 'A'
END


BEGIN Enum constant may not refer to self (1)
enum E { A = A };
EXPECT_MESSAGE
:1:14: error enum constant 'A' not yet available
:1:10: see definition of enum constant 'A'
END


BEGIN Enum constant may not refer to self (2)
#enum A
enum E { A = A };
EXPECT_MESSAGE
:2:14: error enum constant 'A' not yet available
:2:10: see definition of enum constant 'A'
END


BEGIN Enum declaration without tag or declarators
enum { A, B };
EXPECT_GLOBALS
[["ec","A",0],["ec","B",1]]


BEGIN Size of incomplete enum
enum E;
char a[sizeof(E)];
EXPECT_MESSAGE
:2:8: error sizeof applied to incomplete type
END


BEGIN Size of complete enum
enum E { A };
char a[sizeof(E)];
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"]
,["var","ES",["A","C",4],"a"]]


BEGIN Enum is incomplete within its definition
enum E { A = sizeof(E) };
EXPECT_MESSAGE
:1:14: error sizeof applied to incomplete type
END


BEGIN Type of enum constant is the enum
enum E { A };
typeof(A) v;
EXPECT_GLOBALS
[["ec","A",0]
,["typedef",["ENUM",[["ec","A",0]]],"E"],["var","ES",["ENUM",[["ec","A",0]]],"v"]]


BEGIN Use enum constant in integer constant expression
enum { A = 1 };
char a[A];
EXPECT_GLOBALS
[["ec","A",1],["var","ES",["A","C",1],"a"]]


BEGIN Error if enum constant is not integer
enum { A = 1.5 };
EXPECT_MESSAGE
:1:12: error enum constant type 'double' is not an integer type
EXPECT_GLOBALS
[["ec","A",0]]


BEGIN Type member expression on enum constant
enum E { .A };
int x = E.A;
EXPECT_GLOBALS
[["typedef",["ENUM",[["ec","A",0]]],"E"]
,["var","ES","Si","x",[".",["ENUM",[["ec","A",0]]],"A"]]]


BEGIN Type member expression on enum constant using cast variant
enum E { .A };
int x = (E).A;
EXPECT_GLOBALS
[["typedef",["ENUM",[["ec","A",0]]],"E"]
,["var","ES","Si","x",[".",["ENUM",[["ec","A",0]]],"A"]]]
