BEGIN Function parameters of function type are adjusted to pointer
int foo(int bar(void));
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", ["F", "Si"]]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (1)
int foo(int x[]);
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", "Si"]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (2)
int foo(int x[2]);
EXPECT_AST
[["fun", "E", ["F", "Si", ["P", "Si"]], "foo"]]


BEGIN Function parameters of array type are adjusted to pointer (3)
int foo(int x[2][3]);
EXPECT_AST
[["fun","E",["F","Si",["P",["A","Si",3]]],"foo"]]


BEGIN Qualified array type parameter
int foo(int x[const volatile restrict 1]);
EXPECT_AST
[["fun","E",["F","Si",["Qcrv",["P","Si"]]],"foo"]]


BEGIN Error on qualified array type parameter that is not outer-most
int foo(int x[2][const volatile restrict 3]);
EXPECT_MESSAGE
:1:18: error unexpected token 'const'
EXPECT_AST
[["fun","E",["F","Si",["P",["A","Si"]]],"foo"]]


BEGIN Static array type parameter
int foo(int x[static 1]);
EXPECT_AST
[["fun","E",["F","Si",["P","Si"]],"foo"]]


BEGIN Function parameters of typedef array type are adjusted to pointer
#type T
int foo(T x);
typedef int T[];
EXPECT_GLOBALS
[["typedef",["A","Si"],"T"]
,["fun","E",["F","Si",["P","Si"]],"foo"]]


BEGIN typeof parameter
void foo(int x, typeof(x) y);
EXPECT_AST
[["fun","E",["F","V","Si","Si"],"foo"]]


BEGIN Extern storage class prevents inline definition (1)
extern inline void foo();
EXPECT_GLOBALS
[["fun","E",["F","V"],"foo"]]


BEGIN Extern storage class prevents inline definition (2)
extern void foo();
inline void foo();
EXPECT_GLOBALS
[["fun","E",["F","V"],"foo"]]


BEGIN Extern storage class prevents inline definition (3)
inline void foo();
extern void foo();
EXPECT_GLOBALS
[["fun","E",["F","V"],"foo"]]


BEGIN Function definition with function declaration (1)
static void foo(int);
void foo(int x) {
}
EXPECT_GLOBALS
[["fun","I",["F","V","Si"],"foo",["x"],["block",[]]]]


BEGIN Function definition with function declaration (2)
void foo(int x) {
}
extern void foo(int);
EXPECT_GLOBALS
[["fun","E",["F","V","Si"],"foo",["x"],["block",[]]]]


BEGIN Function initially declared with a function-typed typedef
typedef void F(int x);
F foo;
void foo(int x) {
}
EXPECT_GLOBALS
[["typedef",["F","V","Si"],"F"]
,["fun","E",["F","V","Si"],"foo",["x"],["block",[]]]]


BEGIN Enitity declared like both a variable and function
typedef void F(int x);
F foo = 7;
void foo(int x) {
}
EXPECT_MESSAGE
:3:6: error redefinition of function 'foo' with different kind of identifier...
:2:3: ...see other
END


BEGIN Function declared only in variable like way
typedef void F(int x);
F foo;
F foo;
EXPECT_GLOBALS
[["typedef",["F","V","Si"],"F"],["fun","E",["F","V","Si"],"foo"]]


BEGIN Error on function redefinition
void foo(int x) {
}
void foo(int x) {
}
EXPECT_MESSAGE
:3:6: error redefinition of function 'foo'...
:1:6: ...see other
END


BEGIN Block scope extern storage class
void foo(int);
void f() {
    extern void foo(int);
}
EXPECT_AST
[["fun","E",["F","V","Si"],"foo"]
,["fun","E",["F","V"],"f",[],["block",[
    ["fun","E",["F","V","Si"],"foo"]]]
]]


BEGIN Redeclare variable with internal linkage at block scope.
static int x;
void f()
{
    typedef int x;
    {
        extern int x, y;
        x * y;  // Multiplies rather than declaring variable "y" of type "int*"
    }
}
EXPECT_AST
[["var","IS","Si","x"]
,["fun","E",["F","V"],"f",[],["block",[
    ["typedef","Si","x"],["block",[
        [["var","IS","Si","x"],["var","ES","Si","y"]]
        ,["*","Nx","Ny"]]]
    ]]
]]


BEGIN Error if redeclaration of external linkage variable is not compatible (1)
int x;
void f() {
    extern float x;
}
EXPECT_MESSAGE
:3:18: error redeclaration of variable 'x' with incompatible type...
:1:5: ...see other
END


BEGIN Error if redeclaration of external linkage variable is not compatible (2)
void f() {
    extern float x;
}
int x;
EXPECT_MESSAGE
:4:5: error redeclaration of variable 'x' with incompatible type...
:2:18: ...see other
END


BEGIN Resolves tag type declarators declared in function prototype scope
void f(enum E { A } a, enum E { A } b) {
}
EXPECT_MESSAGE
:1:24: error redefinition of typedef 'E' with incompatible type...
:1:8: ...see other
:1:33: error redefinition of enum constant 'A'...
:1:17: ...see other
END


BEGIN Resolves tag type declarators declared in function block scope
void f() {
    enum E { A };
    enum E { A };
}
EXPECT_MESSAGE
:3:5: error redefinition of typedef 'E' with incompatible type...
:2:5: ...see other
:3:14: error redefinition of enum constant 'A'...
:2:14: ...see other
END


BEGIN #func directive preceeding function declaration
#func f
void f() {}
EXPECT_GLOBALS
[["fun","E",["F","V"],"f",[],["block",[]]]]


BEGIN Multiple #func directives preceeding function declaration
#func f
#func f
void f() {}
EXPECT_GLOBALS
[["fun","E",["F","V"],"f",[],["block",[]]]]


BEGIN Error on unmatched #func
#func f
void* p = f;
EXPECT_MESSAGE
:1:7: error declaration directive not matched with a proper declaration of 'f'
END
