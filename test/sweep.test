BEGIN marks identifiers in declaration type
#include "a.h"
T x;
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT

  #extern x
#line 1 13 "a.h"
#type T
#line 1
typedef int T;
#line 2 ""
T x;
END


BEGIN marks identifiers in array declarator
#include "a.h"
int x;
PREPROCESS
FILE "a.h"
extern int x;
EXPECT_TEXT

    #extern x
#line 1 "a.h"
extern int x;
#line 2 ""
int x;
END


BEGIN marks identifiers in array declarator size expression
#include "a.h"
int x[y];
PREPROCESS
FILE "a.h"
const int y = 2;  // TODO: replace this with a avalid constant integer expression
EXPECT_TEXT

    #extern x
#line 1 11 "a.h"
#extern y
#line 1
const int y = 2;
#line 2 ""
int x[y];
END


BEGIN marks identifiers in function prototype
#include "a.h"
int foo(T x);
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT

    #extern foo
#line 1 13 "a.h"
#type T
#line 1
typedef int T;
#line 2 ""
int foo(T x);
END


BEGIN marks identifiers in function definition body
#include "a.h"
int foo(void) {
    T x;
}
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT

    #extern foo
#line 1 13 "a.h"
#type T
#line 1
typedef int T;
#line 2 ""
int foo(void) {
    T x;
}
END


BEGIN Keeps marked struct
#include "a.h"
int foo(void) {
    S x;
}
PREPROCESS
FILE "a.h"
struct S {
    int x;
};
EXPECT_TEXT

    #extern foo
#line 1 "a.h"
#type S
#line 1
struct S {
    int x;
};
#line 2 ""
int foo(void) {
    S x;
}
END


BEGIN Keeps enum marked via constant
#include "a.h"
int foo(void) {
    return GREEN;
}
PREPROCESS
FILE "a.h"
enum Color { RED, GREEN, BLUE };
EXPECT_TEXT

    #extern foo
#line 1 "a.h"
#type Color
#line 1 14
#enum RED
#line 1 19
#enum GREEN
#line 1 26
#enum BLUE
#line 1
enum Color { RED, GREEN, BLUE };
#line 2 ""
int foo(void) {
    return GREEN;
}
END
