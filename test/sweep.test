BEGIN marks identifiers in declaration type
#include "a.h"
T x;
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT
#static type T
#extern variable x

#line 1 "a.h"
typedef int T;
#line 2 ""
T x;
END


BEGIN marks identifiers in array declarator
#include "a.h"
int x;
PREPROCESS
FILE "a.h"
extern int x;
EXPECT_TEXT
#extern variable x

#line 1 "a.h"
extern int x;
#line 2 ""
int x;
END


BEGIN marks identifiers in array declarator size expression
#include "a.h"
int x[y];
PREPROCESS
FILE "a.h"
const int y = 2;  // TODO: replace this with a avalid constant integer expression
EXPECT_TEXT
#extern variable x y

#line 1 "a.h"
const int y = 2;
#line 2 ""
int x[y];
END


BEGIN marks identifiers in function prototype
#include "a.h"
int foo(T x);
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT
#static type T
#extern function foo

#line 1 "a.h"
typedef int T;
#line 2 ""
int foo(T x);
END


BEGIN marks identifiers in function definition body
#include "a.h"
int foo(void) {
    T x;
}
PREPROCESS
FILE "a.h"
typedef int T;
EXPECT_TEXT
#static type T
#extern function foo

#line 1 "a.h"
typedef int T;
#line 2 ""
int foo(void) {
    T x;
}
END


BEGIN Keeps marked struct
#include "a.h"
int foo(void) {
    S x;
}
PREPROCESS
FILE "a.h"
struct S {
    int x;
};
EXPECT_TEXT
#static type S
#extern function foo

#line 1 "a.h"
struct S {
    int x;
};
#line 2 ""
int foo(void) {
    S x;
}
END


BEGIN Keeps enum marked via constant
#include "a.h"
int foo(void) {
    return GREEN;
}
PREPROCESS
FILE "a.h"
enum Color { RED, GREEN, BLUE };
EXPECT_TEXT
#static type Color
#static enum BLUE GREEN RED
#extern function foo

#line 1 "a.h"
enum Color { RED, GREEN, BLUE };
#line 2 ""
int foo(void) {
    return GREEN;
}
END
